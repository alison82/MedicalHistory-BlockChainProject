{"ast":null,"code":"'use strict';\n\nconst multihashing = require('multihashing-async');\n\nconst protobuf = require('protons');\n\nconst bs58 = require('bs58');\n\nconst nextTick = require('async/nextTick');\n\nconst crypto = require('./rsa');\n\nconst pbm = protobuf(require('./keys.proto'));\n\nrequire('node-forge/lib/sha512');\n\nrequire('node-forge/lib/pbe');\n\nconst forge = require('node-forge/lib/forge');\n\nclass RsaPublicKey {\n  constructor(key) {\n    this._key = key;\n  }\n\n  verify(data, sig, callback) {\n    ensure(callback);\n    crypto.hashAndVerify(this._key, sig, data, callback);\n  }\n\n  marshal() {\n    return crypto.utils.jwkToPkix(this._key);\n  }\n\n  get bytes() {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    });\n  }\n\n  encrypt(bytes) {\n    return this._key.encrypt(bytes, 'RSAES-PKCS1-V1_5');\n  }\n\n  equals(key) {\n    return this.bytes.equals(key.bytes);\n  }\n\n  hash(callback) {\n    ensure(callback);\n    multihashing(this.bytes, 'sha2-256', callback);\n  }\n\n}\n\nclass RsaPrivateKey {\n  // key       - Object of the jwk format\n  // publicKey - Buffer of the spki format\n  constructor(key, publicKey) {\n    this._key = key;\n    this._publicKey = publicKey;\n  }\n\n  genSecret() {\n    return crypto.getRandomValues(16);\n  }\n\n  sign(message, callback) {\n    ensure(callback);\n    crypto.hashAndSign(this._key, message, callback);\n  }\n\n  get public() {\n    if (!this._publicKey) {\n      throw new Error('public key not provided');\n    }\n\n    return new RsaPublicKey(this._publicKey);\n  }\n\n  decrypt(msg, callback) {\n    crypto.decrypt(this._key, msg, callback);\n  }\n\n  marshal() {\n    return crypto.utils.jwkToPkcs1(this._key);\n  }\n\n  get bytes() {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    });\n  }\n\n  equals(key) {\n    return this.bytes.equals(key.bytes);\n  }\n\n  hash(callback) {\n    ensure(callback);\n    multihashing(this.bytes, 'sha2-256', callback);\n  }\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   *\n   * @param {function(Error, id)} callback\n   * @returns {undefined}\n   */\n\n\n  id(callback) {\n    this.public.hash((err, hash) => {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(null, bs58.encode(hash));\n    });\n  }\n  /**\n   * Exports the key into a password protected PEM format\n   *\n   * @param {string} [format] - Defaults to 'pkcs-8'.\n   * @param {string} password - The password to read the encrypted PEM\n   * @param {function(Error, KeyInfo)} callback\n   * @returns {undefined}\n   */\n\n\n  export(format, password, callback) {\n    if (typeof password === 'function') {\n      callback = password;\n      password = format;\n      format = 'pkcs-8';\n    }\n\n    ensure(callback);\n    nextTick(() => {\n      let err = null;\n      let pem = null;\n\n      try {\n        const buffer = new forge.util.ByteBuffer(this.marshal());\n        const asn1 = forge.asn1.fromDer(buffer);\n        const privateKey = forge.pki.privateKeyFromAsn1(asn1);\n\n        if (format === 'pkcs-8') {\n          const options = {\n            algorithm: 'aes256',\n            count: 10000,\n            saltSize: 128 / 8,\n            prfAlgorithm: 'sha512'\n          };\n          pem = forge.pki.encryptRsaPrivateKey(privateKey, password, options);\n        } else {\n          err = new Error(\"Unknown export format '\".concat(format, \"'\"));\n        }\n      } catch (_err) {\n        err = _err;\n      }\n\n      callback(err, pem);\n    });\n  }\n\n}\n\nfunction unmarshalRsaPrivateKey(bytes, callback) {\n  const jwk = crypto.utils.pkcs1ToJwk(bytes);\n  crypto.unmarshalPrivateKey(jwk, (err, keys) => {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey));\n  });\n}\n\nfunction unmarshalRsaPublicKey(bytes) {\n  const jwk = crypto.utils.pkixToJwk(bytes);\n  return new RsaPublicKey(jwk);\n}\n\nfunction fromJwk(jwk, callback) {\n  crypto.unmarshalPrivateKey(jwk, (err, keys) => {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey));\n  });\n}\n\nfunction generateKeyPair(bits, callback) {\n  crypto.generateKey(bits, (err, keys) => {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey));\n  });\n}\n\nfunction ensure(callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('callback is required');\n  }\n}\n\nmodule.exports = {\n  RsaPublicKey,\n  RsaPrivateKey,\n  unmarshalRsaPublicKey,\n  unmarshalRsaPrivateKey,\n  generateKeyPair,\n  fromJwk\n};","map":{"version":3,"sources":["D:/Mega-AC1982/Develop/Block-Chain/MedicalHistory-BlockChainProject/IPFS/node_modules/ipfs-http-client/node_modules/libp2p-crypto/src/keys/rsa-class.js"],"names":["multihashing","require","protobuf","bs58","nextTick","crypto","pbm","forge","RsaPublicKey","constructor","key","_key","verify","data","sig","callback","ensure","hashAndVerify","marshal","utils","jwkToPkix","bytes","PublicKey","encode","Type","KeyType","RSA","Data","encrypt","equals","hash","RsaPrivateKey","publicKey","_publicKey","genSecret","getRandomValues","sign","message","hashAndSign","public","Error","decrypt","msg","jwkToPkcs1","PrivateKey","id","err","export","format","password","pem","buffer","util","ByteBuffer","asn1","fromDer","privateKey","pki","privateKeyFromAsn1","options","algorithm","count","saltSize","prfAlgorithm","encryptRsaPrivateKey","_err","unmarshalRsaPrivateKey","jwk","pkcs1ToJwk","unmarshalPrivateKey","keys","unmarshalRsaPublicKey","pkixToJwk","fromJwk","generateKeyPair","bits","generateKey","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst multihashing = require('multihashing-async')\nconst protobuf = require('protons')\nconst bs58 = require('bs58')\nconst nextTick = require('async/nextTick')\n\nconst crypto = require('./rsa')\nconst pbm = protobuf(require('./keys.proto'))\nrequire('node-forge/lib/sha512')\nrequire('node-forge/lib/pbe')\nconst forge = require('node-forge/lib/forge')\n\nclass RsaPublicKey {\n  constructor (key) {\n    this._key = key\n  }\n\n  verify (data, sig, callback) {\n    ensure(callback)\n    crypto.hashAndVerify(this._key, sig, data, callback)\n  }\n\n  marshal () {\n    return crypto.utils.jwkToPkix(this._key)\n  }\n\n  get bytes () {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    })\n  }\n\n  encrypt (bytes) {\n    return this._key.encrypt(bytes, 'RSAES-PKCS1-V1_5')\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n}\n\nclass RsaPrivateKey {\n  // key       - Object of the jwk format\n  // publicKey - Buffer of the spki format\n  constructor (key, publicKey) {\n    this._key = key\n    this._publicKey = publicKey\n  }\n\n  genSecret () {\n    return crypto.getRandomValues(16)\n  }\n\n  sign (message, callback) {\n    ensure(callback)\n    crypto.hashAndSign(this._key, message, callback)\n  }\n\n  get public () {\n    if (!this._publicKey) {\n      throw new Error('public key not provided')\n    }\n\n    return new RsaPublicKey(this._publicKey)\n  }\n\n  decrypt (msg, callback) {\n    crypto.decrypt(this._key, msg, callback)\n  }\n\n  marshal () {\n    return crypto.utils.jwkToPkcs1(this._key)\n  }\n\n  get bytes () {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    })\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   *\n   * @param {function(Error, id)} callback\n   * @returns {undefined}\n   */\n  id (callback) {\n    this.public.hash((err, hash) => {\n      if (err) {\n        return callback(err)\n      }\n      callback(null, bs58.encode(hash))\n    })\n  }\n\n  /**\n   * Exports the key into a password protected PEM format\n   *\n   * @param {string} [format] - Defaults to 'pkcs-8'.\n   * @param {string} password - The password to read the encrypted PEM\n   * @param {function(Error, KeyInfo)} callback\n   * @returns {undefined}\n   */\n  export (format, password, callback) {\n    if (typeof password === 'function') {\n      callback = password\n      password = format\n      format = 'pkcs-8'\n    }\n\n    ensure(callback)\n\n    nextTick(() => {\n      let err = null\n      let pem = null\n      try {\n        const buffer = new forge.util.ByteBuffer(this.marshal())\n        const asn1 = forge.asn1.fromDer(buffer)\n        const privateKey = forge.pki.privateKeyFromAsn1(asn1)\n        if (format === 'pkcs-8') {\n          const options = {\n            algorithm: 'aes256',\n            count: 10000,\n            saltSize: 128 / 8,\n            prfAlgorithm: 'sha512'\n          }\n          pem = forge.pki.encryptRsaPrivateKey(privateKey, password, options)\n        } else {\n          err = new Error(`Unknown export format '${format}'`)\n        }\n      } catch (_err) {\n        err = _err\n      }\n\n      callback(err, pem)\n    })\n  }\n}\n\nfunction unmarshalRsaPrivateKey (bytes, callback) {\n  const jwk = crypto.utils.pkcs1ToJwk(bytes)\n\n  crypto.unmarshalPrivateKey(jwk, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction unmarshalRsaPublicKey (bytes) {\n  const jwk = crypto.utils.pkixToJwk(bytes)\n\n  return new RsaPublicKey(jwk)\n}\n\nfunction fromJwk (jwk, callback) {\n  crypto.unmarshalPrivateKey(jwk, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction generateKeyPair (bits, callback) {\n  crypto.generateKey(bits, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction ensure (callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('callback is required')\n  }\n}\n\nmodule.exports = {\n  RsaPublicKey,\n  RsaPrivateKey,\n  unmarshalRsaPublicKey,\n  unmarshalRsaPrivateKey,\n  generateKeyPair,\n  fromJwk\n}\n"]},"metadata":{},"sourceType":"script"}