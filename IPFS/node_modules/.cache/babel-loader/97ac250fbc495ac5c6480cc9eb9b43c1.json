{"ast":null,"code":"'use strict';\n\nconst crypto = global.crypto || global.msCrypto; // limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n\nconst MAX_BYTES = 65536;\n\nfunction oldBrowser() {\n  throw new Error('Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11');\n}\n\nif (crypto && crypto.getRandomValues) {\n  module.exports = randomBytes;\n} else {\n  module.exports = oldBrowser;\n}\n\nfunction randomBytes(size) {\n  const bytes = new Uint8Array(size);\n  let generated = 0;\n\n  if (size > 0) {\n    // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) {\n      while (generated < bytes) {\n        if (generated + MAX_BYTES > bytes) {\n          crypto.getRandomValues(bytes.subarray(generated, bytes - generated));\n        } else {\n          crypto.getRandomValues(bytes.subarray(generated, generated + MAX_BYTES));\n          generated += MAX_BYTES;\n        }\n      }\n    } else {\n      crypto.getRandomValues(bytes);\n    }\n  }\n\n  return Buffer.from(bytes);\n}","map":{"version":3,"sources":["D:/Mega-AC1982/Develop/Block-Chain/MedicalHistory-BlockChainProject/IPFS/node_modules/iso-random-stream/src/random.browser.js"],"names":["crypto","global","msCrypto","MAX_BYTES","oldBrowser","Error","getRandomValues","module","exports","randomBytes","size","bytes","Uint8Array","generated","subarray","Buffer","from"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,MAAM,CAACD,MAAP,IAAiBC,MAAM,CAACC,QAAvC,C,CAEA;AACA;;AACA,MAAMC,SAAS,GAAG,KAAlB;;AAEA,SAASC,UAAT,GAAsB;AAClB,QAAM,IAAIC,KAAJ,CACF,gHADE,CAAN;AAGH;;AAED,IAAIL,MAAM,IAAIA,MAAM,CAACM,eAArB,EAAsC;AAClCC,EAAAA,MAAM,CAACC,OAAP,GAAiBC,WAAjB;AACH,CAFD,MAEO;AACHF,EAAAA,MAAM,CAACC,OAAP,GAAiBJ,UAAjB;AACH;;AAED,SAASK,WAAT,CAAqBC,IAArB,EAA2B;AACvB,QAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeF,IAAf,CAAd;AACA,MAAIG,SAAS,GAAG,CAAhB;;AAEA,MAAIH,IAAI,GAAG,CAAX,EAAc;AACV;AACA,QAAIA,IAAI,GAAGP,SAAX,EAAsB;AAClB,aAAOU,SAAS,GAAGF,KAAnB,EAA0B;AACtB,YAAIE,SAAS,GAAGV,SAAZ,GAAwBQ,KAA5B,EAAmC;AAC/BX,UAAAA,MAAM,CAACM,eAAP,CACIK,KAAK,CAACG,QAAN,CAAeD,SAAf,EAA0BF,KAAK,GAAGE,SAAlC,CADJ;AAGH,SAJD,MAIO;AACHb,UAAAA,MAAM,CAACM,eAAP,CACIK,KAAK,CAACG,QAAN,CAAeD,SAAf,EAA0BA,SAAS,GAAGV,SAAtC,CADJ;AAGAU,UAAAA,SAAS,IAAIV,SAAb;AACH;AACJ;AACJ,KAbD,MAaO;AACHH,MAAAA,MAAM,CAACM,eAAP,CAAuBK,KAAvB;AACH;AACJ;;AAED,SAAOI,MAAM,CAACC,IAAP,CAAYL,KAAZ,CAAP;AACH","sourcesContent":["'use strict';\n\nconst crypto = global.crypto || global.msCrypto;\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nconst MAX_BYTES = 65536;\n\nfunction oldBrowser() {\n    throw new Error(\n        'Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11'\n    );\n}\n\nif (crypto && crypto.getRandomValues) {\n    module.exports = randomBytes;\n} else {\n    module.exports = oldBrowser;\n}\n\nfunction randomBytes(size) {\n    const bytes = new Uint8Array(size);\n    let generated = 0;\n\n    if (size > 0) {\n        // getRandomValues fails on IE if size == 0\n        if (size > MAX_BYTES) {\n            while (generated < bytes) {\n                if (generated + MAX_BYTES > bytes) {\n                    crypto.getRandomValues(\n                        bytes.subarray(generated, bytes - generated)\n                    );\n                } else {\n                    crypto.getRandomValues(\n                        bytes.subarray(generated, generated + MAX_BYTES)\n                    );\n                    generated += MAX_BYTES;\n                }\n            }\n        } else {\n            crypto.getRandomValues(bytes);\n        }\n    }\n\n    return Buffer.from(bytes);\n}\n"]},"metadata":{},"sourceType":"script"}