{"ast":null,"code":"/* eslint max-depth: 1 */\n'use strict';\n\nvar varint = require('varint');\n\nvar defined = require('./utils').defined;\n\nfunction compileDecode(m, resolve, enc) {\n  var requiredFields = [];\n  var fields = {};\n  var oneofFields = [];\n  var vals = [];\n\n  for (var i = 0; i < enc.length; i++) {\n    var field = m.fields[i];\n    fields[field.tag] = i;\n    var def = field.options && field.options.default;\n    var resolved = resolve(field.type, m.id, false);\n    vals[i] = [def, resolved && resolved.values];\n    m.fields[i].packed = field.repeated && field.options && field.options.packed && field.options.packed !== 'false';\n\n    if (field.required) {\n      requiredFields.push(field.name);\n    }\n\n    if (field.oneof) {\n      oneofFields.push(field.name);\n    }\n  }\n\n  function decodeField(e, field, obj, buf, offset, i) {\n    var name = field.name;\n\n    if (field.oneof) {\n      // clear already defined oneof fields\n      var props = Object.keys(obj);\n\n      for (var j = 0; j < props.length; j++) {\n        if (oneofFields.indexOf(props[j]) > -1) {\n          delete obj[props[j]];\n        }\n      }\n    }\n\n    if (e.message) {\n      var len = varint.decode(buf, offset);\n      offset += varint.decode.bytes;\n      var decoded = e.decode(buf, offset, offset + len);\n\n      if (field.map) {\n        obj[name] = obj[name] || {};\n        obj[name][decoded.key] = decoded.value;\n      } else if (field.repeated) {\n        obj[name] = obj[name] || [];\n        obj[name].push(decoded);\n      } else {\n        obj[name] = decoded;\n      }\n    } else {\n      if (field.repeated) {\n        obj[name] = obj[name] || [];\n        obj[name].push(e.decode(buf, offset));\n      } else {\n        obj[name] = e.decode(buf, offset);\n      }\n    }\n\n    offset += e.decode.bytes;\n    return offset;\n  }\n\n  return function decode(buf, offset, end) {\n    if (offset == null) {\n      offset = 0;\n    }\n\n    if (end == null) {\n      end = buf.length;\n    }\n\n    if (!(end <= buf.length && offset <= buf.length)) {\n      throw new Error('Decoded message is not valid');\n    }\n\n    var oldOffset = offset;\n    var obj = {};\n    var field;\n\n    while (true) {\n      if (end <= offset) {\n        // finished\n        // check required methods\n        var name = '';\n        var j = 0;\n\n        for (j = 0; j < requiredFields.length; j++) {\n          name = requiredFields[j];\n\n          if (!defined(obj[name])) {\n            throw new Error('Decoded message is not valid, missing required field: ' + name);\n          }\n        } // fill out missing defaults\n\n\n        var val;\n        var def;\n\n        for (j = 0; j < enc.length; j++) {\n          field = m.fields[j];\n          def = vals[j][0];\n          val = vals[j][1];\n          name = field.name;\n\n          if (defined(obj[name])) {\n            continue;\n          }\n\n          var done = false;\n\n          if (field.oneof) {\n            var props = Object.keys(obj);\n\n            for (var k = 0; k < props.length; k++) {\n              if (oneofFields.indexOf(props[k]) > -1) {\n                done = true;\n                break;\n              }\n            }\n          }\n\n          if (done) {\n            continue;\n          }\n\n          if (val) {\n            // is enum\n            if (field.repeated) {\n              obj[name] = [];\n            } else {\n              def = def && val[def] ? val[def].value : val[Object.keys(val)[0]].value;\n              obj[name] = parseInt(def || 0, 10);\n            }\n          } else {\n            obj[name] = defaultValue(field, def);\n          }\n        }\n\n        decode.bytes = offset - oldOffset;\n        return obj;\n      }\n\n      var prefix = varint.decode(buf, offset);\n      offset += varint.decode.bytes;\n      var tag = prefix >> 3;\n      var i = fields[tag];\n\n      if (i == null) {\n        offset = skip(prefix & 7, buf, offset);\n        continue;\n      }\n\n      var e = enc[i];\n      field = m.fields[i];\n\n      if (field.packed) {\n        var packedEnd = varint.decode(buf, offset);\n        offset += varint.decode.bytes;\n        packedEnd += offset;\n\n        while (offset < packedEnd) {\n          offset = decodeField(e, field, obj, buf, offset, i);\n        }\n      } else {\n        offset = decodeField(e, field, obj, buf, offset, i);\n      }\n    }\n  };\n}\n\nvar skip = function skip(type, buffer, offset) {\n  switch (type) {\n    case 0:\n      varint.decode(buffer, offset);\n      return offset + varint.decode.bytes;\n\n    case 1:\n      return offset + 8;\n\n    case 2:\n      var len = varint.decode(buffer, offset);\n      return offset + varint.decode.bytes + len;\n\n    case 3:\n    case 4:\n      throw new Error('Groups are not supported');\n\n    case 5:\n      return offset + 4;\n\n    default:\n      throw new Error('Unknown wire type: ' + type);\n  }\n};\n\nvar defaultValue = function defaultValue(f, def) {\n  if (f.map) return {};\n  if (f.repeated) return [];\n\n  switch (f.type) {\n    case 'string':\n      return def != null ? def : '';\n\n    case 'bool':\n      return def === 'true';\n\n    case 'float':\n    case 'double':\n    case 'sfixed32':\n    case 'fixed32':\n    case 'varint':\n    case 'enum':\n    case 'uint64':\n    case 'uint32':\n    case 'int64':\n    case 'int32':\n    case 'sint64':\n    case 'sint32':\n      return parseInt(def || 0, 10);\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports = compileDecode;","map":{"version":3,"sources":["D:/Mega-AC1982/Develop/Block-Chain/MedicalHistory-BlockChainProject/IPFS/node_modules/protons/src/compile/decode.js"],"names":["varint","require","defined","compileDecode","m","resolve","enc","requiredFields","fields","oneofFields","vals","i","length","field","tag","def","options","default","resolved","type","id","values","packed","repeated","required","push","name","oneof","decodeField","e","obj","buf","offset","props","Object","keys","j","indexOf","message","len","decode","bytes","decoded","map","key","value","end","Error","oldOffset","val","done","k","parseInt","defaultValue","prefix","skip","packedEnd","buffer","f","module","exports"],"mappings":"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","sourcesContent":["/* eslint max-depth: 1 */\n'use strict'\n\nvar varint = require('varint')\nvar defined = require('./utils').defined\n\nfunction compileDecode (m, resolve, enc) {\n  var requiredFields = []\n  var fields = {}\n  var oneofFields = []\n  var vals = []\n\n  for (var i = 0; i < enc.length; i++) {\n    var field = m.fields[i]\n\n    fields[field.tag] = i\n\n    var def = field.options && field.options.default\n    var resolved = resolve(field.type, m.id, false)\n    vals[i] = [def, resolved && resolved.values]\n\n    m.fields[i].packed = field.repeated && field.options && field.options.packed && field.options.packed !== 'false'\n\n    if (field.required) {\n      requiredFields.push(field.name)\n    }\n\n    if (field.oneof) {\n      oneofFields.push(field.name)\n    }\n  }\n\n  function decodeField (e, field, obj, buf, offset, i) {\n    var name = field.name\n\n    if (field.oneof) {\n      // clear already defined oneof fields\n      var props = Object.keys(obj)\n      for (var j = 0; j < props.length; j++) {\n        if (oneofFields.indexOf(props[j]) > -1) {\n          delete obj[props[j]]\n        }\n      }\n    }\n\n    if (e.message) {\n      var len = varint.decode(buf, offset)\n      offset += varint.decode.bytes\n\n      var decoded = e.decode(buf, offset, offset + len)\n\n      if (field.map) {\n        obj[name] = obj[name] || {}\n        obj[name][decoded.key] = decoded.value\n      } else if (field.repeated) {\n        obj[name] = obj[name] || []\n        obj[name].push(decoded)\n      } else {\n        obj[name] = decoded\n      }\n    } else {\n      if (field.repeated) {\n        obj[name] = obj[name] || []\n        obj[name].push(e.decode(buf, offset))\n      } else {\n        obj[name] = e.decode(buf, offset)\n      }\n    }\n\n    offset += e.decode.bytes\n    return offset\n  }\n\n  return function decode (buf, offset, end) {\n    if (offset == null) {\n      offset = 0\n    }\n\n    if (end == null) {\n      end = buf.length\n    }\n\n    if (!(end <= buf.length && offset <= buf.length)) {\n      throw new Error('Decoded message is not valid')\n    }\n\n    var oldOffset = offset\n    var obj = {}\n    var field\n\n    while (true) {\n      if (end <= offset) {\n        // finished\n\n        // check required methods\n        var name = ''\n        var j = 0\n        for (j = 0; j < requiredFields.length; j++) {\n          name = requiredFields[j]\n          if (!defined(obj[name])) {\n            throw new Error('Decoded message is not valid, missing required field: ' + name)\n          }\n        }\n\n        // fill out missing defaults\n        var val\n        var def\n        for (j = 0; j < enc.length; j++) {\n          field = m.fields[j]\n          def = vals[j][0]\n          val = vals[j][1]\n          name = field.name\n\n          if (defined(obj[name])) {\n            continue\n          }\n\n          var done = false\n          if (field.oneof) {\n            var props = Object.keys(obj)\n            for (var k = 0; k < props.length; k++) {\n              if (oneofFields.indexOf(props[k]) > -1) {\n                done = true\n                break\n              }\n            }\n          }\n\n          if (done) {\n            continue\n          }\n\n          if (val) { // is enum\n            if (field.repeated) {\n              obj[name] = []\n            } else {\n              def = (def && val[def]) ? val[def].value : val[Object.keys(val)[0]].value\n              obj[name] = parseInt(def || 0, 10)\n            }\n          } else {\n            obj[name] = defaultValue(field, def)\n          }\n        }\n\n        decode.bytes = offset - oldOffset\n        return obj\n      }\n\n      var prefix = varint.decode(buf, offset)\n      offset += varint.decode.bytes\n      var tag = prefix >> 3\n\n      var i = fields[tag]\n\n      if (i == null) {\n        offset = skip(prefix & 7, buf, offset)\n        continue\n      }\n\n      var e = enc[i]\n      field = m.fields[i]\n\n      if (field.packed) {\n        var packedEnd = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        packedEnd += offset\n\n        while (offset < packedEnd) {\n          offset = decodeField(e, field, obj, buf, offset, i)\n        }\n      } else {\n        offset = decodeField(e, field, obj, buf, offset, i)\n      }\n    }\n  }\n}\n\nvar skip = function (type, buffer, offset) {\n  switch (type) {\n    case 0:\n      varint.decode(buffer, offset)\n      return offset + varint.decode.bytes\n\n    case 1:\n      return offset + 8\n\n    case 2:\n      var len = varint.decode(buffer, offset)\n      return offset + varint.decode.bytes + len\n\n    case 3:\n    case 4:\n      throw new Error('Groups are not supported')\n\n    case 5:\n      return offset + 4\n    default:\n      throw new Error('Unknown wire type: ' + type)\n  }\n}\n\nvar defaultValue = function (f, def) {\n  if (f.map) return {}\n  if (f.repeated) return []\n\n  switch (f.type) {\n    case 'string':\n      return def != null ? def : ''\n\n    case 'bool':\n      return def === 'true'\n\n    case 'float':\n    case 'double':\n    case 'sfixed32':\n    case 'fixed32':\n    case 'varint':\n    case 'enum':\n    case 'uint64':\n    case 'uint32':\n    case 'int64':\n    case 'int32':\n    case 'sint64':\n    case 'sint32':\n      return parseInt(def || 0, 10)\n\n    default:\n      return null\n  }\n}\n\nmodule.exports = compileDecode\n"]},"metadata":{},"sourceType":"script"}