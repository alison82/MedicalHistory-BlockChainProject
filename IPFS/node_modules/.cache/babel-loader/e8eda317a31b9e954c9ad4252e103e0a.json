{"ast":null,"code":"'use strict';\n\nconst nodeify = require('../nodeify');\n\nconst webcrypto = require('../webcrypto');\n\nconst randomBytes = require('../random-bytes');\n\nexports.utils = require('./rsa-utils');\n\nexports.generateKey = function (bits, callback) {\n  nodeify(webcrypto.subtle.generateKey({\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: bits,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['sign', 'verify']).then(exportKey).then(keys => ({\n    privateKey: keys[0],\n    publicKey: keys[1]\n  })), callback);\n}; // Takes a jwk key\n\n\nexports.unmarshalPrivateKey = function (key, callback) {\n  const privateKey = webcrypto.subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['sign']);\n  nodeify(Promise.all([privateKey, derivePublicFromPrivate(key)]).then(keys => exportKey({\n    privateKey: keys[0],\n    publicKey: keys[1]\n  })).then(keys => ({\n    privateKey: keys[0],\n    publicKey: keys[1]\n  })), callback);\n};\n\nexports.getRandomValues = randomBytes;\n\nexports.hashAndSign = function (key, msg, callback) {\n  nodeify(webcrypto.subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, false, ['sign']).then(privateKey => {\n    return webcrypto.subtle.sign({\n      name: 'RSASSA-PKCS1-v1_5'\n    }, privateKey, Uint8Array.from(msg));\n  }).then(sig => Buffer.from(sig)), callback);\n};\n\nexports.hashAndVerify = function (key, sig, msg, callback) {\n  nodeify(webcrypto.subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, false, ['verify']).then(publicKey => {\n    return webcrypto.subtle.verify({\n      name: 'RSASSA-PKCS1-v1_5'\n    }, publicKey, sig, msg);\n  }), callback);\n};\n\nfunction exportKey(pair) {\n  return Promise.all([webcrypto.subtle.exportKey('jwk', pair.privateKey), webcrypto.subtle.exportKey('jwk', pair.publicKey)]);\n}\n\nfunction derivePublicFromPrivate(jwKey) {\n  return webcrypto.subtle.importKey('jwk', {\n    kty: jwKey.kty,\n    n: jwKey.n,\n    e: jwKey.e\n  }, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['verify']);\n}","map":{"version":3,"sources":["D:/Mega-AC1982/Develop/Block-Chain/MedicalHistory-BlockChainProject/IPFS/node_modules/ipfs-http-client/node_modules/libp2p-crypto/src/keys/rsa-browser.js"],"names":["nodeify","require","webcrypto","randomBytes","exports","utils","generateKey","bits","callback","subtle","name","modulusLength","publicExponent","Uint8Array","hash","then","exportKey","keys","privateKey","publicKey","unmarshalPrivateKey","key","importKey","Promise","all","derivePublicFromPrivate","getRandomValues","hashAndSign","msg","sign","from","sig","Buffer","hashAndVerify","verify","pair","jwKey","kty","n","e"],"mappings":"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","sourcesContent":["'use strict'\n\nconst nodeify = require('../nodeify')\nconst webcrypto = require('../webcrypto')\nconst randomBytes = require('../random-bytes')\n\nexports.utils = require('./rsa-utils')\n\nexports.generateKey = function (bits, callback) {\n  nodeify(webcrypto.subtle.generateKey(\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      modulusLength: bits,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['sign', 'verify']\n  )\n    .then(exportKey)\n    .then((keys) => ({\n      privateKey: keys[0],\n      publicKey: keys[1]\n    })), callback)\n}\n\n// Takes a jwk key\nexports.unmarshalPrivateKey = function (key, callback) {\n  const privateKey = webcrypto.subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['sign']\n  )\n\n  nodeify(Promise.all([\n    privateKey,\n    derivePublicFromPrivate(key)\n  ]).then((keys) => exportKey({\n    privateKey: keys[0],\n    publicKey: keys[1]\n  })).then((keys) => ({\n    privateKey: keys[0],\n    publicKey: keys[1]\n  })), callback)\n}\n\nexports.getRandomValues = randomBytes\n\nexports.hashAndSign = function (key, msg, callback) {\n  nodeify(webcrypto.subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    false,\n    ['sign']\n  ).then((privateKey) => {\n    return webcrypto.subtle.sign(\n      { name: 'RSASSA-PKCS1-v1_5' },\n      privateKey,\n      Uint8Array.from(msg)\n    )\n  }).then((sig) => Buffer.from(sig)), callback)\n}\n\nexports.hashAndVerify = function (key, sig, msg, callback) {\n  nodeify(webcrypto.subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    false,\n    ['verify']\n  ).then((publicKey) => {\n    return webcrypto.subtle.verify(\n      { name: 'RSASSA-PKCS1-v1_5' },\n      publicKey,\n      sig,\n      msg\n    )\n  }), callback)\n}\n\nfunction exportKey (pair) {\n  return Promise.all([\n    webcrypto.subtle.exportKey('jwk', pair.privateKey),\n    webcrypto.subtle.exportKey('jwk', pair.publicKey)\n  ])\n}\n\nfunction derivePublicFromPrivate (jwKey) {\n  return webcrypto.subtle.importKey(\n    'jwk',\n    {\n      kty: jwKey.kty,\n      n: jwKey.n,\n      e: jwKey.e\n    },\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['verify']\n  )\n}\n"]},"metadata":{},"sourceType":"script"}