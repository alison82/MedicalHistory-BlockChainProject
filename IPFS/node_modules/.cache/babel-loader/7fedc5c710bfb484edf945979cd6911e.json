{"ast":null,"code":"var tokenize = require('./tokenize');\n\nvar MAX_RANGE = 0x1FFFFFFF; // \"Only repeated fields of primitive numeric types (types which use the varint, 32-bit, or 64-bit wire types) can be declared \"packed\".\"\n// https://developers.google.com/protocol-buffers/docs/encoding#optional\n\nvar PACKABLE_TYPES = [// varint wire types\n'int32', 'int64', 'uint32', 'uint64', 'sint32', 'sint64', 'bool', // + ENUMS\n// 64-bit wire types\n'fixed64', 'sfixed64', 'double', // 32-bit wire types\n'fixed32', 'sfixed32', 'float'];\n\nvar onfieldoptions = function onfieldoptions(tokens) {\n  var opts = {};\n\n  while (tokens.length) {\n    switch (tokens[0]) {\n      case '[':\n      case ',':\n        tokens.shift();\n        var name = tokens.shift();\n\n        if (name === '(') {\n          // handling [(A) = B]\n          name = tokens.shift();\n          tokens.shift(); // remove the end of bracket\n        }\n\n        if (tokens[0] !== '=') throw new Error('Unexpected token in field options: ' + tokens[0]);\n        tokens.shift();\n        if (tokens[0] === ']') throw new Error('Unexpected ] in field option');\n        opts[name] = tokens.shift();\n        break;\n\n      case ']':\n        tokens.shift();\n        return opts;\n\n      default:\n        throw new Error('Unexpected token in field options: ' + tokens[0]);\n    }\n  }\n\n  throw new Error('No closing tag for field options');\n};\n\nvar onfield = function onfield(tokens) {\n  var field = {\n    name: null,\n    type: null,\n    tag: -1,\n    map: null,\n    oneof: null,\n    required: false,\n    repeated: false,\n    options: {}\n  };\n\n  while (tokens.length) {\n    switch (tokens[0]) {\n      case '=':\n        tokens.shift();\n        field.tag = Number(tokens.shift());\n        break;\n\n      case 'map':\n        field.type = 'map';\n        field.map = {\n          from: null,\n          to: null\n        };\n        tokens.shift();\n        if (tokens[0] !== '<') throw new Error('Unexpected token in map type: ' + tokens[0]);\n        tokens.shift();\n        field.map.from = tokens.shift();\n        if (tokens[0] !== ',') throw new Error('Unexpected token in map type: ' + tokens[0]);\n        tokens.shift();\n        field.map.to = tokens.shift();\n        if (tokens[0] !== '>') throw new Error('Unexpected token in map type: ' + tokens[0]);\n        tokens.shift();\n        field.name = tokens.shift();\n        break;\n\n      case 'repeated':\n      case 'required':\n      case 'optional':\n        var t = tokens.shift();\n        field.required = t === 'required';\n        field.repeated = t === 'repeated';\n        field.type = tokens.shift();\n        field.name = tokens.shift();\n        break;\n\n      case '[':\n        field.options = onfieldoptions(tokens);\n        break;\n\n      case ';':\n        if (field.name === null) throw new Error('Missing field name');\n        if (field.type === null) throw new Error('Missing type in message field: ' + field.name);\n        if (field.tag === -1) throw new Error('Missing tag number in message field: ' + field.name);\n        tokens.shift();\n        return field;\n\n      default:\n        throw new Error('Unexpected token in message field: ' + tokens[0]);\n    }\n  }\n\n  throw new Error('No ; found for message field');\n};\n\nvar onmessagebody = function onmessagebody(tokens) {\n  var body = {\n    enums: [],\n    messages: [],\n    fields: [],\n    extends: [],\n    extensions: null\n  };\n\n  while (tokens.length) {\n    switch (tokens[0]) {\n      case 'map':\n      case 'repeated':\n      case 'optional':\n      case 'required':\n        body.fields.push(onfield(tokens));\n        break;\n\n      case 'enum':\n        body.enums.push(onenum(tokens));\n        break;\n\n      case 'message':\n        body.messages.push(onmessage(tokens));\n        break;\n\n      case 'extensions':\n        body.extensions = onextensions(tokens);\n        break;\n\n      case 'oneof':\n        tokens.shift();\n        var name = tokens.shift();\n        if (tokens[0] !== '{') throw new Error('Unexpected token in oneof: ' + tokens[0]);\n        tokens.shift();\n\n        while (tokens[0] !== '}') {\n          tokens.unshift('optional');\n          var field = onfield(tokens);\n          field.oneof = name;\n          body.fields.push(field);\n        }\n\n        tokens.shift();\n        break;\n\n      case 'extend':\n        body.extends.push(onextend(tokens));\n        break;\n\n      case ';':\n        tokens.shift();\n        break;\n\n      case 'reserved':\n      case 'option':\n        tokens.shift();\n\n        while (tokens[0] !== ';') {\n          tokens.shift();\n        }\n\n        break;\n\n      default:\n        // proto3 does not require the use of optional/required, assumed as optional\n        // \"singular: a well-formed message can have zero or one of this field (but not more than one).\"\n        // https://developers.google.com/protocol-buffers/docs/proto3#specifying-field-rules\n        tokens.unshift('optional');\n        body.fields.push(onfield(tokens));\n    }\n  }\n\n  return body;\n};\n\nvar onextend = function onextend(tokens) {\n  var out = {\n    name: tokens[1],\n    message: onmessage(tokens)\n  };\n  return out;\n};\n\nvar onextensions = function onextensions(tokens) {\n  tokens.shift();\n  var from = Number(tokens.shift());\n  if (isNaN(from)) throw new Error('Invalid from in extensions definition');\n  if (tokens.shift() !== 'to') throw new Error(\"Expected keyword 'to' in extensions definition\");\n  var to = tokens.shift();\n  if (to === 'max') to = MAX_RANGE;\n  to = Number(to);\n  if (isNaN(to)) throw new Error('Invalid to in extensions definition');\n  if (tokens.shift() !== ';') throw new Error('Missing ; in extensions definition');\n  return {\n    from: from,\n    to: to\n  };\n};\n\nvar onmessage = function onmessage(tokens) {\n  tokens.shift();\n  var lvl = 1;\n  var body = [];\n  var msg = {\n    name: tokens.shift(),\n    enums: [],\n    extends: [],\n    messages: [],\n    fields: []\n  };\n  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0]);\n  tokens.shift();\n\n  while (tokens.length) {\n    if (tokens[0] === '{') lvl++;else if (tokens[0] === '}') lvl--;\n\n    if (!lvl) {\n      tokens.shift();\n      body = onmessagebody(body);\n      msg.enums = body.enums;\n      msg.messages = body.messages;\n      msg.fields = body.fields;\n      msg.extends = body.extends;\n      msg.extensions = body.extensions;\n      return msg;\n    }\n\n    body.push(tokens.shift());\n  }\n\n  if (lvl) throw new Error('No closing tag for message');\n};\n\nvar onpackagename = function onpackagename(tokens) {\n  tokens.shift();\n  var name = tokens.shift();\n  if (tokens[0] !== ';') throw new Error('Expected ; but found ' + tokens[0]);\n  tokens.shift();\n  return name;\n};\n\nvar onsyntaxversion = function onsyntaxversion(tokens) {\n  tokens.shift();\n  if (tokens[0] !== '=') throw new Error('Expected = but found ' + tokens[0]);\n  tokens.shift();\n  var version = tokens.shift();\n\n  switch (version) {\n    case '\"proto2\"':\n      version = 2;\n      break;\n\n    case '\"proto3\"':\n      version = 3;\n      break;\n\n    default:\n      throw new Error('Expected protobuf syntax version but found ' + version);\n  }\n\n  if (tokens[0] !== ';') throw new Error('Expected ; but found ' + tokens[0]);\n  tokens.shift();\n  return version;\n};\n\nvar onenumvalue = function onenumvalue(tokens) {\n  if (tokens.length < 4) throw new Error('Invalid enum value: ' + tokens.slice(0, 3).join(' '));\n  if (tokens[1] !== '=') throw new Error('Expected = but found ' + tokens[1]);\n  if (tokens[3] !== ';' && tokens[3] !== '[') throw new Error('Expected ; or [ but found ' + tokens[1]);\n  var name = tokens.shift();\n  tokens.shift();\n  var val = {\n    value: null,\n    options: {}\n  };\n  val.value = Number(tokens.shift());\n\n  if (tokens[0] === '[') {\n    val.options = onfieldoptions(tokens);\n  }\n\n  tokens.shift(); // expecting the semicolon here\n\n  return {\n    name: name,\n    val: val\n  };\n};\n\nvar onenum = function onenum(tokens) {\n  tokens.shift();\n  var options = {};\n  var e = {\n    name: tokens.shift(),\n    values: {},\n    options: {}\n  };\n  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0]);\n  tokens.shift();\n\n  while (tokens.length) {\n    if (tokens[0] === '}') {\n      tokens.shift(); // there goes optional semicolon after the enclosing \"}\"\n\n      if (tokens[0] === ';') tokens.shift();\n      return e;\n    }\n\n    if (tokens[0] === 'option') {\n      options = onoption(tokens);\n      e.options[options.name] = options.value;\n      continue;\n    }\n\n    var val = onenumvalue(tokens);\n    e.values[val.name] = val.val;\n  }\n\n  throw new Error('No closing tag for enum');\n};\n\nvar onoption = function onoption(tokens) {\n  var name = null;\n  var value = null;\n\n  var parse = function parse(value) {\n    if (value === 'true') return true;\n    if (value === 'false') return false;\n    return value.replace(/^\"+|\"+$/gm, '');\n  };\n\n  while (tokens.length) {\n    if (tokens[0] === ';') {\n      tokens.shift();\n      return {\n        name: name,\n        value: value\n      };\n    }\n\n    switch (tokens[0]) {\n      case 'option':\n        tokens.shift();\n        var hasBracket = tokens[0] === '(';\n        if (hasBracket) tokens.shift();\n        name = tokens.shift();\n\n        if (hasBracket) {\n          if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0]);\n          tokens.shift();\n        }\n\n        if (tokens[0][0] === '.') {\n          name += tokens.shift();\n        }\n\n        break;\n\n      case '=':\n        tokens.shift();\n        if (name === null) throw new Error('Expected key for option with value: ' + tokens[0]);\n        value = parse(tokens.shift());\n\n        if (name === 'optimize_for' && !/^(SPEED|CODE_SIZE|LITE_RUNTIME)$/.test(value)) {\n          throw new Error('Unexpected value for option optimize_for: ' + value);\n        } else if (value === '{') {\n          // option foo = {bar: baz}\n          value = onoptionMap(tokens);\n        }\n\n        break;\n\n      default:\n        throw new Error('Unexpected token in option: ' + tokens[0]);\n    }\n  }\n};\n\nvar onoptionMap = function onoptionMap(tokens) {\n  var parse = function parse(value) {\n    if (value === 'true') return true;\n    if (value === 'false') return false;\n    return value.replace(/^\"+|\"+$/gm, '');\n  };\n\n  var map = {};\n\n  while (tokens.length) {\n    if (tokens[0] === '}') {\n      tokens.shift();\n      return map;\n    }\n\n    var hasBracket = tokens[0] === '(';\n    if (hasBracket) tokens.shift();\n    var key = tokens.shift();\n\n    if (hasBracket) {\n      if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0]);\n      tokens.shift();\n    }\n\n    var value = null;\n\n    switch (tokens[0]) {\n      case ':':\n        if (map[key] !== undefined) throw new Error('Duplicate option map key ' + key);\n        tokens.shift();\n        value = parse(tokens.shift());\n\n        if (value === '{') {\n          // option foo = {bar: baz}\n          value = onoptionMap(tokens);\n        }\n\n        map[key] = value;\n\n        if (tokens[0] === ';') {\n          tokens.shift();\n        }\n\n        break;\n\n      case '{':\n        tokens.shift();\n        value = onoptionMap(tokens);\n        if (map[key] === undefined) map[key] = [];\n        if (!Array.isArray(map[key])) throw new Error('Duplicate option map key ' + key);\n        map[key].push(value);\n        break;\n\n      default:\n        throw new Error('Unexpected token in option map: ' + tokens[0]);\n    }\n  }\n\n  throw new Error('No closing tag for option map');\n};\n\nvar onimport = function onimport(tokens) {\n  tokens.shift();\n  var file = tokens.shift().replace(/^\"+|\"+$/gm, '');\n  if (tokens[0] !== ';') throw new Error('Unexpected token: ' + tokens[0] + '. Expected \";\"');\n  tokens.shift();\n  return file;\n};\n\nvar onservice = function onservice(tokens) {\n  tokens.shift();\n  var service = {\n    name: tokens.shift(),\n    methods: [],\n    options: {}\n  };\n  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0]);\n  tokens.shift();\n\n  while (tokens.length) {\n    if (tokens[0] === '}') {\n      tokens.shift(); // there goes optional semicolon after the enclosing \"}\"\n\n      if (tokens[0] === ';') tokens.shift();\n      return service;\n    }\n\n    switch (tokens[0]) {\n      case 'option':\n        var opt = onoption(tokens);\n        if (service.options[opt.name] !== undefined) throw new Error('Duplicate option ' + opt.name);\n        service.options[opt.name] = opt.value;\n        break;\n\n      case 'rpc':\n        service.methods.push(onrpc(tokens));\n        break;\n\n      default:\n        throw new Error('Unexpected token in service: ' + tokens[0]);\n    }\n  }\n\n  throw new Error('No closing tag for service');\n};\n\nvar onrpc = function onrpc(tokens) {\n  tokens.shift();\n  var rpc = {\n    name: tokens.shift(),\n    input_type: null,\n    output_type: null,\n    client_streaming: false,\n    server_streaming: false,\n    options: {}\n  };\n  if (tokens[0] !== '(') throw new Error('Expected ( but found ' + tokens[0]);\n  tokens.shift();\n\n  if (tokens[0] === 'stream') {\n    tokens.shift();\n    rpc.client_streaming = true;\n  }\n\n  rpc.input_type = tokens.shift();\n  if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0]);\n  tokens.shift();\n  if (tokens[0] !== 'returns') throw new Error('Expected returns but found ' + tokens[0]);\n  tokens.shift();\n  if (tokens[0] !== '(') throw new Error('Expected ( but found ' + tokens[0]);\n  tokens.shift();\n\n  if (tokens[0] === 'stream') {\n    tokens.shift();\n    rpc.server_streaming = true;\n  }\n\n  rpc.output_type = tokens.shift();\n  if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0]);\n  tokens.shift();\n\n  if (tokens[0] === ';') {\n    tokens.shift();\n    return rpc;\n  }\n\n  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0]);\n  tokens.shift();\n\n  while (tokens.length) {\n    if (tokens[0] === '}') {\n      tokens.shift(); // there goes optional semicolon after the enclosing \"}\"\n\n      if (tokens[0] === ';') tokens.shift();\n      return rpc;\n    }\n\n    if (tokens[0] === 'option') {\n      var opt = onoption(tokens);\n      if (rpc.options[opt.name] !== undefined) throw new Error('Duplicate option ' + opt.name);\n      rpc.options[opt.name] = opt.value;\n    } else {\n      throw new Error('Unexpected token in rpc options: ' + tokens[0]);\n    }\n  }\n\n  throw new Error('No closing tag for rpc');\n};\n\nvar parse = function parse(buf) {\n  var tokens = tokenize(buf.toString()); // check for isolated strings in tokens by looking for opening quote\n\n  for (var i = 0; i < tokens.length; i++) {\n    if (/^(\"|')([^'\"]*)$/.test(tokens[i])) {\n      var j;\n\n      if (tokens[i].length === 1) {\n        j = i + 1;\n      } else {\n        j = i;\n      } // look ahead for the closing quote and collapse all\n      // in-between tokens into a single token\n\n\n      for (j; j < tokens.length; j++) {\n        if (/^([^'\"]*)(\"|')$/.test(tokens[j])) {\n          tokens = tokens.slice(0, i).concat(tokens.slice(i, j + 1).join('')).concat(tokens.slice(j + 1));\n          break;\n        }\n      }\n    }\n  }\n\n  var schema = {\n    syntax: 3,\n    package: null,\n    imports: [],\n    enums: [],\n    messages: [],\n    options: {},\n    extends: []\n  };\n  var firstline = true;\n\n  while (tokens.length) {\n    switch (tokens[0]) {\n      case 'package':\n        schema.package = onpackagename(tokens);\n        break;\n\n      case 'syntax':\n        if (!firstline) throw new Error('Protobuf syntax version should be first thing in file');\n        schema.syntax = onsyntaxversion(tokens);\n        break;\n\n      case 'message':\n        schema.messages.push(onmessage(tokens));\n        break;\n\n      case 'enum':\n        schema.enums.push(onenum(tokens));\n        break;\n\n      case 'option':\n        var opt = onoption(tokens);\n        if (schema.options[opt.name]) throw new Error('Duplicate option ' + opt.name);\n        schema.options[opt.name] = opt.value;\n        break;\n\n      case 'import':\n        schema.imports.push(onimport(tokens));\n        break;\n\n      case 'extend':\n        schema.extends.push(onextend(tokens));\n        break;\n\n      case 'service':\n        if (!schema.services) schema.services = [];\n        schema.services.push(onservice(tokens));\n        break;\n\n      default:\n        throw new Error('Unexpected token: ' + tokens[0]);\n    }\n\n    firstline = false;\n  } // now iterate over messages and propagate extends\n\n\n  schema.extends.forEach(function (ext) {\n    schema.messages.forEach(function (msg) {\n      if (msg.name === ext.name) {\n        ext.message.fields.forEach(function (field) {\n          if (!msg.extensions || field.tag < msg.extensions.from || field.tag > msg.extensions.to) {\n            throw new Error(msg.name + ' does not declare ' + field.tag + ' as an extension number');\n          }\n\n          msg.fields.push(field);\n        });\n      }\n    });\n  });\n  schema.messages.forEach(function (msg) {\n    msg.fields.forEach(function (field) {\n      var fieldSplit;\n      var messageName;\n      var nestedEnumName;\n      var message;\n\n      function enumNameIsFieldType(en) {\n        return en.name === field.type;\n      }\n\n      function enumNameIsNestedEnumName(en) {\n        return en.name === nestedEnumName;\n      }\n\n      if (field.options && field.options.packed === 'true') {\n        if (PACKABLE_TYPES.indexOf(field.type) === -1) {\n          // let's see if it's an enum\n          if (field.type.indexOf('.') === -1) {\n            if (msg.enums && msg.enums.some(enumNameIsFieldType)) {\n              return;\n            }\n          } else {\n            fieldSplit = field.type.split('.');\n\n            if (fieldSplit.length > 2) {\n              throw new Error('what is this?');\n            }\n\n            messageName = fieldSplit[0];\n            nestedEnumName = fieldSplit[1];\n            schema.messages.some(function (msg) {\n              if (msg.name === messageName) {\n                message = msg;\n                return msg;\n              }\n            });\n\n            if (message && message.enums && message.enums.some(enumNameIsNestedEnumName)) {\n              return;\n            }\n          }\n\n          throw new Error('Fields of type ' + field.type + ' cannot be declared [packed=true]. ' + 'Only repeated fields of primitive numeric types (types which use ' + 'the varint, 32-bit, or 64-bit wire types) can be declared \"packed\". ' + 'See https://developers.google.com/protocol-buffers/docs/encoding#optional');\n        }\n      }\n    });\n  });\n  return schema;\n};\n\nmodule.exports = parse;","map":{"version":3,"sources":["D:/Mega-AC1982/Develop/Block-Chain/MedicalHistory-BlockChainProject/IPFS/node_modules/protocol-buffers-schema/parse.js"],"names":["tokenize","require","MAX_RANGE","PACKABLE_TYPES","onfieldoptions","tokens","opts","length","shift","name","Error","onfield","field","type","tag","map","oneof","required","repeated","options","Number","from","to","t","onmessagebody","body","enums","messages","fields","extends","extensions","push","onenum","onmessage","onextensions","unshift","onextend","out","message","isNaN","lvl","msg","onpackagename","onsyntaxversion","version","onenumvalue","slice","join","val","value","e","values","onoption","parse","replace","hasBracket","test","onoptionMap","key","undefined","Array","isArray","onimport","file","onservice","service","methods","opt","onrpc","rpc","input_type","output_type","client_streaming","server_streaming","buf","toString","i","j","concat","schema","syntax","package","imports","firstline","services","forEach","ext","fieldSplit","messageName","nestedEnumName","enumNameIsFieldType","en","enumNameIsNestedEnumName","packed","indexOf","some","split","module","exports"],"mappings":"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","sourcesContent":["var tokenize = require('./tokenize')\nvar MAX_RANGE = 0x1FFFFFFF\n\n// \"Only repeated fields of primitive numeric types (types which use the varint, 32-bit, or 64-bit wire types) can be declared \"packed\".\"\n// https://developers.google.com/protocol-buffers/docs/encoding#optional\nvar PACKABLE_TYPES = [\n  // varint wire types\n  'int32', 'int64', 'uint32', 'uint64', 'sint32', 'sint64', 'bool',\n  // + ENUMS\n  // 64-bit wire types\n  'fixed64', 'sfixed64', 'double',\n  // 32-bit wire types\n  'fixed32', 'sfixed32', 'float'\n]\n\nvar onfieldoptions = function (tokens) {\n  var opts = {}\n\n  while (tokens.length) {\n    switch (tokens[0]) {\n      case '[':\n      case ',':\n        tokens.shift()\n        var name = tokens.shift()\n        if (name === '(') {       // handling [(A) = B]\n          name = tokens.shift()\n          tokens.shift()          // remove the end of bracket\n        }\n        if (tokens[0] !== '=') throw new Error('Unexpected token in field options: ' + tokens[0])\n        tokens.shift()\n        if (tokens[0] === ']') throw new Error('Unexpected ] in field option')\n        opts[name] = tokens.shift()\n        break\n      case ']':\n        tokens.shift()\n        return opts\n\n      default:\n        throw new Error('Unexpected token in field options: ' + tokens[0])\n    }\n  }\n\n  throw new Error('No closing tag for field options')\n}\n\nvar onfield = function (tokens) {\n  var field = {\n    name: null,\n    type: null,\n    tag: -1,\n    map: null,\n    oneof: null,\n    required: false,\n    repeated: false,\n    options: {}\n  }\n\n  while (tokens.length) {\n    switch (tokens[0]) {\n      case '=':\n        tokens.shift()\n        field.tag = Number(tokens.shift())\n        break\n\n      case 'map':\n        field.type = 'map'\n        field.map = {from: null, to: null}\n        tokens.shift()\n        if (tokens[0] !== '<') throw new Error('Unexpected token in map type: ' + tokens[0])\n        tokens.shift()\n        field.map.from = tokens.shift()\n        if (tokens[0] !== ',') throw new Error('Unexpected token in map type: ' + tokens[0])\n        tokens.shift()\n        field.map.to = tokens.shift()\n        if (tokens[0] !== '>') throw new Error('Unexpected token in map type: ' + tokens[0])\n        tokens.shift()\n        field.name = tokens.shift()\n        break\n\n      case 'repeated':\n      case 'required':\n      case 'optional':\n        var t = tokens.shift()\n        field.required = t === 'required'\n        field.repeated = t === 'repeated'\n        field.type = tokens.shift()\n        field.name = tokens.shift()\n        break\n\n      case '[':\n        field.options = onfieldoptions(tokens)\n        break\n\n      case ';':\n        if (field.name === null) throw new Error('Missing field name')\n        if (field.type === null) throw new Error('Missing type in message field: ' + field.name)\n        if (field.tag === -1) throw new Error('Missing tag number in message field: ' + field.name)\n        tokens.shift()\n        return field\n\n      default:\n        throw new Error('Unexpected token in message field: ' + tokens[0])\n    }\n  }\n\n  throw new Error('No ; found for message field')\n}\n\nvar onmessagebody = function (tokens) {\n  var body = {\n    enums: [],\n    messages: [],\n    fields: [],\n    extends: [],\n    extensions: null\n  }\n\n  while (tokens.length) {\n    switch (tokens[0]) {\n      case 'map':\n      case 'repeated':\n      case 'optional':\n      case 'required':\n        body.fields.push(onfield(tokens))\n        break\n\n      case 'enum':\n        body.enums.push(onenum(tokens))\n        break\n\n      case 'message':\n        body.messages.push(onmessage(tokens))\n        break\n\n      case 'extensions':\n        body.extensions = onextensions(tokens)\n        break\n\n      case 'oneof':\n        tokens.shift()\n        var name = tokens.shift()\n        if (tokens[0] !== '{') throw new Error('Unexpected token in oneof: ' + tokens[0])\n        tokens.shift()\n        while (tokens[0] !== '}') {\n          tokens.unshift('optional')\n          var field = onfield(tokens)\n          field.oneof = name\n          body.fields.push(field)\n        }\n        tokens.shift()\n        break\n\n      case 'extend':\n        body.extends.push(onextend(tokens))\n        break\n\n      case ';':\n        tokens.shift()\n        break\n\n      case 'reserved':\n      case 'option':\n        tokens.shift()\n        while (tokens[0] !== ';') {\n          tokens.shift()\n        }\n        break\n\n      default:\n        // proto3 does not require the use of optional/required, assumed as optional\n        // \"singular: a well-formed message can have zero or one of this field (but not more than one).\"\n        // https://developers.google.com/protocol-buffers/docs/proto3#specifying-field-rules\n        tokens.unshift('optional')\n        body.fields.push(onfield(tokens))\n    }\n  }\n\n  return body\n}\n\nvar onextend = function (tokens) {\n  var out = {\n    name: tokens[1],\n    message: onmessage(tokens)\n  }\n  return out\n}\n\nvar onextensions = function (tokens) {\n  tokens.shift()\n  var from = Number(tokens.shift())\n  if (isNaN(from)) throw new Error('Invalid from in extensions definition')\n  if (tokens.shift() !== 'to') throw new Error(\"Expected keyword 'to' in extensions definition\")\n  var to = tokens.shift()\n  if (to === 'max') to = MAX_RANGE\n  to = Number(to)\n  if (isNaN(to)) throw new Error('Invalid to in extensions definition')\n  if (tokens.shift() !== ';') throw new Error('Missing ; in extensions definition')\n  return {from: from, to: to}\n}\nvar onmessage = function (tokens) {\n  tokens.shift()\n\n  var lvl = 1\n  var body = []\n  var msg = {\n    name: tokens.shift(),\n    enums: [],\n    extends: [],\n    messages: [],\n    fields: []\n  }\n\n  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0])\n  tokens.shift()\n\n  while (tokens.length) {\n    if (tokens[0] === '{') lvl++\n    else if (tokens[0] === '}') lvl--\n\n    if (!lvl) {\n      tokens.shift()\n      body = onmessagebody(body)\n      msg.enums = body.enums\n      msg.messages = body.messages\n      msg.fields = body.fields\n      msg.extends = body.extends\n      msg.extensions = body.extensions\n      return msg\n    }\n\n    body.push(tokens.shift())\n  }\n\n  if (lvl) throw new Error('No closing tag for message')\n}\n\nvar onpackagename = function (tokens) {\n  tokens.shift()\n  var name = tokens.shift()\n  if (tokens[0] !== ';') throw new Error('Expected ; but found ' + tokens[0])\n  tokens.shift()\n  return name\n}\n\nvar onsyntaxversion = function (tokens) {\n  tokens.shift()\n\n  if (tokens[0] !== '=') throw new Error('Expected = but found ' + tokens[0])\n  tokens.shift()\n\n  var version = tokens.shift()\n  switch (version) {\n    case '\"proto2\"':\n      version = 2\n      break\n\n    case '\"proto3\"':\n      version = 3\n      break\n\n    default:\n      throw new Error('Expected protobuf syntax version but found ' + version)\n  }\n\n  if (tokens[0] !== ';') throw new Error('Expected ; but found ' + tokens[0])\n  tokens.shift()\n\n  return version\n}\n\nvar onenumvalue = function (tokens) {\n  if (tokens.length < 4) throw new Error('Invalid enum value: ' + tokens.slice(0, 3).join(' '))\n  if (tokens[1] !== '=') throw new Error('Expected = but found ' + tokens[1])\n  if (tokens[3] !== ';' && tokens[3] !== '[') throw new Error('Expected ; or [ but found ' + tokens[1])\n\n  var name = tokens.shift()\n  tokens.shift()\n  var val = {\n    value: null,\n    options: {}\n  }\n  val.value = Number(tokens.shift())\n  if (tokens[0] === '[') {\n    val.options = onfieldoptions(tokens)\n  }\n  tokens.shift() // expecting the semicolon here\n\n  return {\n    name: name,\n    val: val\n  }\n}\n\nvar onenum = function (tokens) {\n  tokens.shift()\n  var options = {}\n  var e = {\n    name: tokens.shift(),\n    values: {},\n    options: {}\n  }\n\n  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0])\n  tokens.shift()\n\n  while (tokens.length) {\n    if (tokens[0] === '}') {\n      tokens.shift()\n      // there goes optional semicolon after the enclosing \"}\"\n      if (tokens[0] === ';') tokens.shift()\n      return e\n    }\n    if (tokens[0] === 'option') {\n      options = onoption(tokens)\n      e.options[options.name] = options.value\n      continue\n    }\n    var val = onenumvalue(tokens)\n    e.values[val.name] = val.val\n  }\n\n  throw new Error('No closing tag for enum')\n}\n\nvar onoption = function (tokens) {\n  var name = null\n  var value = null\n\n  var parse = function (value) {\n    if (value === 'true') return true\n    if (value === 'false') return false\n    return value.replace(/^\"+|\"+$/gm, '')\n  }\n\n  while (tokens.length) {\n    if (tokens[0] === ';') {\n      tokens.shift()\n      return {name: name, value: value}\n    }\n    switch (tokens[0]) {\n      case 'option':\n        tokens.shift()\n\n        var hasBracket = tokens[0] === '('\n        if (hasBracket) tokens.shift()\n\n        name = tokens.shift()\n\n        if (hasBracket) {\n          if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0])\n          tokens.shift()\n        }\n\n        if (tokens[0][0] === '.') {\n          name += tokens.shift()\n        }\n\n        break\n\n      case '=':\n        tokens.shift()\n        if (name === null) throw new Error('Expected key for option with value: ' + tokens[0])\n        value = parse(tokens.shift())\n\n        if (name === 'optimize_for' && !/^(SPEED|CODE_SIZE|LITE_RUNTIME)$/.test(value)) {\n          throw new Error('Unexpected value for option optimize_for: ' + value)\n        } else if (value === '{') {\n          // option foo = {bar: baz}\n          value = onoptionMap(tokens)\n        }\n        break\n\n      default:\n        throw new Error('Unexpected token in option: ' + tokens[0])\n    }\n  }\n}\n\nvar onoptionMap = function (tokens) {\n  var parse = function (value) {\n    if (value === 'true') return true\n    if (value === 'false') return false\n    return value.replace(/^\"+|\"+$/gm, '')\n  }\n\n  var map = {}\n\n  while (tokens.length) {\n    if (tokens[0] === '}') {\n      tokens.shift()\n      return map\n    }\n\n    var hasBracket = tokens[0] === '('\n    if (hasBracket) tokens.shift()\n\n    var key = tokens.shift()\n    if (hasBracket) {\n      if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0])\n      tokens.shift()\n    }\n\n    var value = null\n\n    switch (tokens[0]) {\n      case ':':\n        if (map[key] !== undefined) throw new Error('Duplicate option map key ' + key)\n\n        tokens.shift()\n\n        value = parse(tokens.shift())\n\n        if (value === '{') {\n          // option foo = {bar: baz}\n          value = onoptionMap(tokens)\n        }\n\n        map[key] = value\n\n        if (tokens[0] === ';') {\n          tokens.shift()\n        }\n        break\n\n      case '{':\n        tokens.shift()\n        value = onoptionMap(tokens)\n\n        if (map[key] === undefined) map[key] = []\n        if (!Array.isArray(map[key])) throw new Error('Duplicate option map key ' + key)\n\n        map[key].push(value)\n        break\n\n      default:\n        throw new Error('Unexpected token in option map: ' + tokens[0])\n    }\n  }\n\n  throw new Error('No closing tag for option map')\n}\n\nvar onimport = function (tokens) {\n  tokens.shift()\n  var file = tokens.shift().replace(/^\"+|\"+$/gm, '')\n\n  if (tokens[0] !== ';') throw new Error('Unexpected token: ' + tokens[0] + '. Expected \";\"')\n\n  tokens.shift()\n  return file\n}\n\nvar onservice = function (tokens) {\n  tokens.shift()\n\n  var service = {\n    name: tokens.shift(),\n    methods: [],\n    options: {}\n  }\n\n  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0])\n  tokens.shift()\n\n  while (tokens.length) {\n    if (tokens[0] === '}') {\n      tokens.shift()\n      // there goes optional semicolon after the enclosing \"}\"\n      if (tokens[0] === ';') tokens.shift()\n      return service\n    }\n\n    switch (tokens[0]) {\n      case 'option':\n        var opt = onoption(tokens)\n        if (service.options[opt.name] !== undefined) throw new Error('Duplicate option ' + opt.name)\n        service.options[opt.name] = opt.value\n        break\n      case 'rpc':\n        service.methods.push(onrpc(tokens))\n        break\n      default:\n        throw new Error('Unexpected token in service: ' + tokens[0])\n    }\n  }\n\n  throw new Error('No closing tag for service')\n}\n\nvar onrpc = function (tokens) {\n  tokens.shift()\n\n  var rpc = {\n    name: tokens.shift(),\n    input_type: null,\n    output_type: null,\n    client_streaming: false,\n    server_streaming: false,\n    options: {}\n  }\n\n  if (tokens[0] !== '(') throw new Error('Expected ( but found ' + tokens[0])\n  tokens.shift()\n\n  if (tokens[0] === 'stream') {\n    tokens.shift()\n    rpc.client_streaming = true\n  }\n\n  rpc.input_type = tokens.shift()\n\n  if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0])\n  tokens.shift()\n\n  if (tokens[0] !== 'returns') throw new Error('Expected returns but found ' + tokens[0])\n  tokens.shift()\n\n  if (tokens[0] !== '(') throw new Error('Expected ( but found ' + tokens[0])\n  tokens.shift()\n\n  if (tokens[0] === 'stream') {\n    tokens.shift()\n    rpc.server_streaming = true\n  }\n\n  rpc.output_type = tokens.shift()\n\n  if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0])\n  tokens.shift()\n\n  if (tokens[0] === ';') {\n    tokens.shift()\n    return rpc\n  }\n\n  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0])\n  tokens.shift()\n\n  while (tokens.length) {\n    if (tokens[0] === '}') {\n      tokens.shift()\n      // there goes optional semicolon after the enclosing \"}\"\n      if (tokens[0] === ';') tokens.shift()\n      return rpc\n    }\n\n    if (tokens[0] === 'option') {\n      var opt = onoption(tokens)\n      if (rpc.options[opt.name] !== undefined) throw new Error('Duplicate option ' + opt.name)\n      rpc.options[opt.name] = opt.value\n    } else {\n      throw new Error('Unexpected token in rpc options: ' + tokens[0])\n    }\n  }\n\n  throw new Error('No closing tag for rpc')\n}\n\nvar parse = function (buf) {\n  var tokens = tokenize(buf.toString())\n  // check for isolated strings in tokens by looking for opening quote\n  for (var i = 0; i < tokens.length; i++) {\n    if (/^(\"|')([^'\"]*)$/.test(tokens[i])) {\n      var j\n      if (tokens[i].length === 1) {\n        j = i + 1\n      } else {\n        j = i\n      }\n      // look ahead for the closing quote and collapse all\n      // in-between tokens into a single token\n      for (j; j < tokens.length; j++) {\n        if (/^([^'\"]*)(\"|')$/.test(tokens[j])) {\n          tokens = tokens.slice(0, i).concat(tokens.slice(i, j + 1).join('')).concat(tokens.slice(j + 1))\n          break\n        }\n      }\n    }\n  }\n  var schema = {\n    syntax: 3,\n    package: null,\n    imports: [],\n    enums: [],\n    messages: [],\n    options: {},\n    extends: []\n  }\n\n  var firstline = true\n\n  while (tokens.length) {\n    switch (tokens[0]) {\n      case 'package':\n        schema.package = onpackagename(tokens)\n        break\n\n      case 'syntax':\n        if (!firstline) throw new Error('Protobuf syntax version should be first thing in file')\n        schema.syntax = onsyntaxversion(tokens)\n        break\n\n      case 'message':\n        schema.messages.push(onmessage(tokens))\n        break\n\n      case 'enum':\n        schema.enums.push(onenum(tokens))\n        break\n\n      case 'option':\n        var opt = onoption(tokens)\n        if (schema.options[opt.name]) throw new Error('Duplicate option ' + opt.name)\n        schema.options[opt.name] = opt.value\n        break\n\n      case 'import':\n        schema.imports.push(onimport(tokens))\n        break\n\n      case 'extend':\n        schema.extends.push(onextend(tokens))\n        break\n\n      case 'service':\n        if (!schema.services) schema.services = []\n        schema.services.push(onservice(tokens))\n        break\n\n      default:\n        throw new Error('Unexpected token: ' + tokens[0])\n    }\n    firstline = false\n  }\n\n  // now iterate over messages and propagate extends\n  schema.extends.forEach(function (ext) {\n    schema.messages.forEach(function (msg) {\n      if (msg.name === ext.name) {\n        ext.message.fields.forEach(function (field) {\n          if (!msg.extensions || field.tag < msg.extensions.from || field.tag > msg.extensions.to) {\n            throw new Error(msg.name + ' does not declare ' + field.tag + ' as an extension number')\n          }\n          msg.fields.push(field)\n        })\n      }\n    })\n  })\n\n  schema.messages.forEach(function (msg) {\n    msg.fields.forEach(function (field) {\n      var fieldSplit\n      var messageName\n      var nestedEnumName\n      var message\n\n      function enumNameIsFieldType (en) {\n        return en.name === field.type\n      }\n\n      function enumNameIsNestedEnumName (en) {\n        return en.name === nestedEnumName\n      }\n\n      if (field.options && field.options.packed === 'true') {\n        if (PACKABLE_TYPES.indexOf(field.type) === -1) {\n          // let's see if it's an enum\n          if (field.type.indexOf('.') === -1) {\n            if (msg.enums && msg.enums.some(enumNameIsFieldType)) {\n              return\n            }\n          } else {\n            fieldSplit = field.type.split('.')\n            if (fieldSplit.length > 2) {\n              throw new Error('what is this?')\n            }\n\n            messageName = fieldSplit[0]\n            nestedEnumName = fieldSplit[1]\n\n            schema.messages.some(function (msg) {\n              if (msg.name === messageName) {\n                message = msg\n                return msg\n              }\n            })\n\n            if (message && message.enums && message.enums.some(enumNameIsNestedEnumName)) {\n              return\n            }\n          }\n\n          throw new Error(\n            'Fields of type ' + field.type + ' cannot be declared [packed=true]. ' +\n            'Only repeated fields of primitive numeric types (types which use ' +\n            'the varint, 32-bit, or 64-bit wire types) can be declared \"packed\". ' +\n            'See https://developers.google.com/protocol-buffers/docs/encoding#optional'\n          )\n        }\n      }\n    })\n  })\n\n  return schema\n}\n\nmodule.exports = parse\n"]},"metadata":{},"sourceType":"script"}