import { OnInit, ElementRef, OnDestroy, Renderer2, DoCheck } from '@angular/core';
import { ControlValueAccessor, NgControl, NgForm, FormGroupDirective } from '@angular/forms';
import { ErrorStateMatcher } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { FocusMonitor } from '@angular/cdk/a11y';
import { FileInput } from '../model/file-input.model';
import { FileInputMixinBase } from './file-input-mixin';
import * as ɵngcc0 from '@angular/core';
export declare class FileInputComponent extends FileInputMixinBase implements MatFormFieldControl<FileInput>, ControlValueAccessor, OnInit, OnDestroy, DoCheck {
    private fm;
    private _elementRef;
    private _renderer;
    _defaultErrorStateMatcher: ErrorStateMatcher;
    ngControl: NgControl;
    _parentForm: NgForm;
    _parentFormGroup: FormGroupDirective;
    static nextId: number;
    focused: boolean;
    controlType: string;
    autofilled: boolean;
    private _placeholder;
    private _required;
    valuePlaceholder: string;
    multiple: boolean;
    accept: string | null;
    errorStateMatcher: ErrorStateMatcher;
    id: string;
    describedBy: string;
    setDescribedByIds(ids: string[]): void;
    get value(): FileInput | null;
    set value(fileInput: FileInput | null);
    get placeholder(): string;
    set placeholder(plh: string);
    /**
     * Whether the current input has files
     */
    get empty(): boolean;
    get shouldLabelFloat(): boolean;
    get required(): boolean;
    set required(req: boolean);
    get isDisabled(): boolean;
    get disabled(): boolean;
    set disabled(dis: boolean);
    onContainerClick(event: MouseEvent): void;
    /**
     * @see https://angular.io/api/forms/ControlValueAccessor
     */
    constructor(fm: FocusMonitor, _elementRef: ElementRef, _renderer: Renderer2, _defaultErrorStateMatcher: ErrorStateMatcher, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective);
    private _onChange;
    private _onTouched;
    get fileNames(): string;
    writeValue(obj: FileInput | null): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: any): void;
    /**
     * Remove all files from the file input component
     * @param [event] optional event that may have triggered the clear action
     */
    clear(event?: Event): void;
    change(event: Event): void;
    blur(): void;
    setDisabledState(isDisabled: boolean): void;
    ngOnInit(): void;
    open(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FileInputComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FileInputComponent, "ngx-mat-file-input", never, {
    "autofilled": "autofilled";
    "accept": "accept";
    "value": "value";
    "placeholder": "placeholder";
    "required": "required";
    "disabled": "disabled";
    "multiple": "multiple";
    "valuePlaceholder": "valuePlaceholder";
    "errorStateMatcher": "errorStateMatcher";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1pbnB1dC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZmlsZS1pbnB1dC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBEQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgRWxlbWVudFJlZiwgT25EZXN0cm95LCBSZW5kZXJlcjIsIERvQ2hlY2sgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOZ0NvbnRyb2wsIE5nRm9ybSwgRm9ybUdyb3VwRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRXJyb3JTdGF0ZU1hdGNoZXIgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcbmltcG9ydCB7IE1hdEZvcm1GaWVsZENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9mb3JtLWZpZWxkJztcbmltcG9ydCB7IEZvY3VzTW9uaXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IEZpbGVJbnB1dCB9IGZyb20gJy4uL21vZGVsL2ZpbGUtaW5wdXQubW9kZWwnO1xuaW1wb3J0IHsgRmlsZUlucHV0TWl4aW5CYXNlIH0gZnJvbSAnLi9maWxlLWlucHV0LW1peGluJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZpbGVJbnB1dENvbXBvbmVudCBleHRlbmRzIEZpbGVJbnB1dE1peGluQmFzZSBpbXBsZW1lbnRzIE1hdEZvcm1GaWVsZENvbnRyb2w8RmlsZUlucHV0PiwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgT25EZXN0cm95LCBEb0NoZWNrIHtcbiAgICBwcml2YXRlIGZtO1xuICAgIHByaXZhdGUgX2VsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI7XG4gICAgX2RlZmF1bHRFcnJvclN0YXRlTWF0Y2hlcjogRXJyb3JTdGF0ZU1hdGNoZXI7XG4gICAgbmdDb250cm9sOiBOZ0NvbnRyb2w7XG4gICAgX3BhcmVudEZvcm06IE5nRm9ybTtcbiAgICBfcGFyZW50Rm9ybUdyb3VwOiBGb3JtR3JvdXBEaXJlY3RpdmU7XG4gICAgc3RhdGljIG5leHRJZDogbnVtYmVyO1xuICAgIGZvY3VzZWQ6IGJvb2xlYW47XG4gICAgY29udHJvbFR5cGU6IHN0cmluZztcbiAgICBhdXRvZmlsbGVkOiBib29sZWFuO1xuICAgIHByaXZhdGUgX3BsYWNlaG9sZGVyO1xuICAgIHByaXZhdGUgX3JlcXVpcmVkO1xuICAgIHZhbHVlUGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBtdWx0aXBsZTogYm9vbGVhbjtcbiAgICBhY2NlcHQ6IHN0cmluZyB8IG51bGw7XG4gICAgZXJyb3JTdGF0ZU1hdGNoZXI6IEVycm9yU3RhdGVNYXRjaGVyO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgZGVzY3JpYmVkQnk6IHN0cmluZztcbiAgICBzZXREZXNjcmliZWRCeUlkcyhpZHM6IHN0cmluZ1tdKTogdm9pZDtcbiAgICBnZXQgdmFsdWUoKTogRmlsZUlucHV0IHwgbnVsbDtcbiAgICBzZXQgdmFsdWUoZmlsZUlucHV0OiBGaWxlSW5wdXQgfCBudWxsKTtcbiAgICBnZXQgcGxhY2Vob2xkZXIoKTogc3RyaW5nO1xuICAgIHNldCBwbGFjZWhvbGRlcihwbGg6IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgY3VycmVudCBpbnB1dCBoYXMgZmlsZXNcbiAgICAgKi9cbiAgICBnZXQgZW1wdHkoKTogYm9vbGVhbjtcbiAgICBnZXQgc2hvdWxkTGFiZWxGbG9hdCgpOiBib29sZWFuO1xuICAgIGdldCByZXF1aXJlZCgpOiBib29sZWFuO1xuICAgIHNldCByZXF1aXJlZChyZXE6IGJvb2xlYW4pO1xuICAgIGdldCBpc0Rpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IGRpc2FibGVkKGRpczogYm9vbGVhbik7XG4gICAgb25Db250YWluZXJDbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQHNlZSBodHRwczovL2FuZ3VsYXIuaW8vYXBpL2Zvcm1zL0NvbnRyb2xWYWx1ZUFjY2Vzc29yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZm06IEZvY3VzTW9uaXRvciwgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIF9yZW5kZXJlcjogUmVuZGVyZXIyLCBfZGVmYXVsdEVycm9yU3RhdGVNYXRjaGVyOiBFcnJvclN0YXRlTWF0Y2hlciwgbmdDb250cm9sOiBOZ0NvbnRyb2wsIF9wYXJlbnRGb3JtOiBOZ0Zvcm0sIF9wYXJlbnRGb3JtR3JvdXA6IEZvcm1Hcm91cERpcmVjdGl2ZSk7XG4gICAgcHJpdmF0ZSBfb25DaGFuZ2U7XG4gICAgcHJpdmF0ZSBfb25Ub3VjaGVkO1xuICAgIGdldCBmaWxlTmFtZXMoKTogc3RyaW5nO1xuICAgIHdyaXRlVmFsdWUob2JqOiBGaWxlSW5wdXQgfCBudWxsKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYW55KSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIGZpbGVzIGZyb20gdGhlIGZpbGUgaW5wdXQgY29tcG9uZW50XG4gICAgICogQHBhcmFtIFtldmVudF0gb3B0aW9uYWwgZXZlbnQgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWQgdGhlIGNsZWFyIGFjdGlvblxuICAgICAqL1xuICAgIGNsZWFyKGV2ZW50PzogRXZlbnQpOiB2b2lkO1xuICAgIGNoYW5nZShldmVudDogRXZlbnQpOiB2b2lkO1xuICAgIGJsdXIoKTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgb3BlbigpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG59XG4iXX0=