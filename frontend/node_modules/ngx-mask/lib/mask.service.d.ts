import { ElementRef, Renderer2 } from '@angular/core';
import { IConfig } from './config';
import { MaskApplierService } from './mask-applier.service';
import * as ɵngcc0 from '@angular/core';
export declare class MaskService extends MaskApplierService {
    private document;
    protected _config: IConfig;
    private _elementRef;
    private _renderer;
    maskExpression: string;
    isNumberValue: boolean;
    showMaskTyped: boolean;
    placeHolderCharacter: string;
    maskIsShown: string;
    selStart: number | null;
    selEnd: number | null;
    protected _formElement: HTMLInputElement;
    onChange: (_: any) => void;
    constructor(document: any, _config: IConfig, _elementRef: ElementRef, _renderer: Renderer2);
    applyMask(inputValue: string, maskExpression: string, position?: number, cb?: Function): string;
    applyValueChanges(position?: number, cb?: Function): void;
    hideInput(inputValue: string, maskExpression: string): string;
    getActualValue(res: string): string;
    shiftTypedSymbols(inputValue: string): string;
    showMaskInInput(inputVal?: string): string;
    clearIfNotMatchFn(): void;
    formElementProperty: [string, string | boolean];
    checkSpecialCharAmount(mask: string): number;
    private _checkForIp;
    private formControlResult;
    private _removeMask;
    private _removePrefix;
    private _removeSuffix;
    private _retrieveSeparatorValue;
    private _regExpForRemove;
    private _checkSymbols;
    private _retrieveSeparatorPrecision;
    private _checkPrecision;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MaskService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MaskService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbIm1hc2suc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IE1hc2tBcHBsaWVyU2VydmljZSB9IGZyb20gJy4vbWFzay1hcHBsaWVyLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWFza1NlcnZpY2UgZXh0ZW5kcyBNYXNrQXBwbGllclNlcnZpY2Uge1xuICAgIHByaXZhdGUgZG9jdW1lbnQ7XG4gICAgcHJvdGVjdGVkIF9jb25maWc6IElDb25maWc7XG4gICAgcHJpdmF0ZSBfZWxlbWVudFJlZjtcbiAgICBwcml2YXRlIF9yZW5kZXJlcjtcbiAgICBtYXNrRXhwcmVzc2lvbjogc3RyaW5nO1xuICAgIGlzTnVtYmVyVmFsdWU6IGJvb2xlYW47XG4gICAgc2hvd01hc2tUeXBlZDogYm9vbGVhbjtcbiAgICBwbGFjZUhvbGRlckNoYXJhY3Rlcjogc3RyaW5nO1xuICAgIG1hc2tJc1Nob3duOiBzdHJpbmc7XG4gICAgc2VsU3RhcnQ6IG51bWJlciB8IG51bGw7XG4gICAgc2VsRW5kOiBudW1iZXIgfCBudWxsO1xuICAgIHByb3RlY3RlZCBfZm9ybUVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgb25DaGFuZ2U6IChfOiBhbnkpID0+IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQ6IGFueSwgX2NvbmZpZzogSUNvbmZpZywgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIF9yZW5kZXJlcjogUmVuZGVyZXIyKTtcbiAgICBhcHBseU1hc2soaW5wdXRWYWx1ZTogc3RyaW5nLCBtYXNrRXhwcmVzc2lvbjogc3RyaW5nLCBwb3NpdGlvbj86IG51bWJlciwgY2I/OiBGdW5jdGlvbik6IHN0cmluZztcbiAgICBhcHBseVZhbHVlQ2hhbmdlcyhwb3NpdGlvbj86IG51bWJlciwgY2I/OiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgaGlkZUlucHV0KGlucHV0VmFsdWU6IHN0cmluZywgbWFza0V4cHJlc3Npb246IHN0cmluZyk6IHN0cmluZztcbiAgICBnZXRBY3R1YWxWYWx1ZShyZXM6IHN0cmluZyk6IHN0cmluZztcbiAgICBzaGlmdFR5cGVkU3ltYm9scyhpbnB1dFZhbHVlOiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgc2hvd01hc2tJbklucHV0KGlucHV0VmFsPzogc3RyaW5nKTogc3RyaW5nO1xuICAgIGNsZWFySWZOb3RNYXRjaEZuKCk6IHZvaWQ7XG4gICAgZm9ybUVsZW1lbnRQcm9wZXJ0eTogW3N0cmluZywgc3RyaW5nIHwgYm9vbGVhbl07XG4gICAgY2hlY2tTcGVjaWFsQ2hhckFtb3VudChtYXNrOiBzdHJpbmcpOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfY2hlY2tGb3JJcDtcbiAgICBwcml2YXRlIGZvcm1Db250cm9sUmVzdWx0O1xuICAgIHByaXZhdGUgX3JlbW92ZU1hc2s7XG4gICAgcHJpdmF0ZSBfcmVtb3ZlUHJlZml4O1xuICAgIHByaXZhdGUgX3JlbW92ZVN1ZmZpeDtcbiAgICBwcml2YXRlIF9yZXRyaWV2ZVNlcGFyYXRvclZhbHVlO1xuICAgIHByaXZhdGUgX3JlZ0V4cEZvclJlbW92ZTtcbiAgICBwcml2YXRlIF9jaGVja1N5bWJvbHM7XG4gICAgcHJpdmF0ZSBfcmV0cmlldmVTZXBhcmF0b3JQcmVjaXNpb247XG4gICAgcHJpdmF0ZSBfY2hlY2tQcmVjaXNpb247XG59XG4iXX0=