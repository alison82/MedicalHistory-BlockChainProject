import { ElementRef, EventEmitter, AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';
import { GaugeDefaults, GaugeOptions } from './gauge-defaults.service';
import * as ɵngcc0 from '@angular/core';
export declare class GaugeComponent implements AfterViewInit, OnChanges, GaugeOptions {
    private elm;
    private defaults;
    /**
     * The angle in degrees to start the dial
     */
    dialStartAngle: number;
    /**
     * The angle in degrees to end the dial. This MUST be less than dialStartAngle
     */
    dialEndAngle: number;
    /**
     * The radius of the gauge
     */
    dialRadius: number;
    /**
     * The minimum value for the gauge
     */
    min: number;
    /**
     * The maximum value for the gauge
     */
    max: number;
    /**
     * Function that returns a string label that will be rendered in the center. This function will be passed the current value
     */
    label: (value: number) => string;
    /**
     * Function that returns a string color value for the gauge''s fill (value dial)
     */
    color: (value: number) => string;
    /**
     * Whether to show the value at the center of the gauge
     */
    showValue: boolean;
    /**
     * The CSS class of the gauge
     */
    gaugeClass: string;
    /**
     * The CSS class of the gauge's dial
     */
    dialClass: string;
    /**
     * The CSS class of the gauge's fill (value dial)
     */
    valueDialClass: string;
    /**
     * 	The CSS class of the gauge's text
     */
    valueClass: string;
    /**
     * The value of the gauge
     */
    value: number;
    /**
     * Whether to animate changing the gauge
     */
    animated: boolean;
    /**
     * Animation duration in seconds
     */
    animationDuration: number;
    /**
     * Called when the gauge is created
     */
    gaugeCreated: EventEmitter<{
        gauge: any;
    }>;
    private gauge;
    constructor(elm: ElementRef, defaults: GaugeDefaults);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private updateValue();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GaugeComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GaugeComponent, "mwl-gauge", never, {
    "dialStartAngle": "dialStartAngle";
    "dialEndAngle": "dialEndAngle";
    "dialRadius": "dialRadius";
    "min": "min";
    "max": "max";
    "label": "label";
    "color": "color";
    "showValue": "showValue";
    "gaugeClass": "gaugeClass";
    "dialClass": "dialClass";
    "valueDialClass": "valueDialClass";
    "valueClass": "valueClass";
    "value": "value";
    "animated": "animated";
    "animationDuration": "animationDuration";
}, {
    "gaugeCreated": "gaugeCreated";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F1Z2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImdhdWdlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHYXVnZURlZmF1bHRzLCBHYXVnZU9wdGlvbnMgfSBmcm9tICcuL2dhdWdlLWRlZmF1bHRzLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgR2F1Z2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIEdhdWdlT3B0aW9ucyB7XG4gICAgcHJpdmF0ZSBlbG07XG4gICAgcHJpdmF0ZSBkZWZhdWx0cztcbiAgICAvKipcbiAgICAgKiBUaGUgYW5nbGUgaW4gZGVncmVlcyB0byBzdGFydCB0aGUgZGlhbFxuICAgICAqL1xuICAgIGRpYWxTdGFydEFuZ2xlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIGFuZ2xlIGluIGRlZ3JlZXMgdG8gZW5kIHRoZSBkaWFsLiBUaGlzIE1VU1QgYmUgbGVzcyB0aGFuIGRpYWxTdGFydEFuZ2xlXG4gICAgICovXG4gICAgZGlhbEVuZEFuZ2xlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHJhZGl1cyBvZiB0aGUgZ2F1Z2VcbiAgICAgKi9cbiAgICBkaWFsUmFkaXVzOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIG1pbmltdW0gdmFsdWUgZm9yIHRoZSBnYXVnZVxuICAgICAqL1xuICAgIG1pbjogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIHZhbHVlIGZvciB0aGUgZ2F1Z2VcbiAgICAgKi9cbiAgICBtYXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzdHJpbmcgbGFiZWwgdGhhdCB3aWxsIGJlIHJlbmRlcmVkIGluIHRoZSBjZW50ZXIuIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBwYXNzZWQgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAgKi9cbiAgICBsYWJlbDogKHZhbHVlOiBudW1iZXIpID0+IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzdHJpbmcgY29sb3IgdmFsdWUgZm9yIHRoZSBnYXVnZScncyBmaWxsICh2YWx1ZSBkaWFsKVxuICAgICAqL1xuICAgIGNvbG9yOiAodmFsdWU6IG51bWJlcikgPT4gc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gc2hvdyB0aGUgdmFsdWUgYXQgdGhlIGNlbnRlciBvZiB0aGUgZ2F1Z2VcbiAgICAgKi9cbiAgICBzaG93VmFsdWU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIENTUyBjbGFzcyBvZiB0aGUgZ2F1Z2VcbiAgICAgKi9cbiAgICBnYXVnZUNsYXNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIENTUyBjbGFzcyBvZiB0aGUgZ2F1Z2UncyBkaWFsXG4gICAgICovXG4gICAgZGlhbENsYXNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIENTUyBjbGFzcyBvZiB0aGUgZ2F1Z2UncyBmaWxsICh2YWx1ZSBkaWFsKVxuICAgICAqL1xuICAgIHZhbHVlRGlhbENsYXNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogXHRUaGUgQ1NTIGNsYXNzIG9mIHRoZSBnYXVnZSdzIHRleHRcbiAgICAgKi9cbiAgICB2YWx1ZUNsYXNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIG9mIHRoZSBnYXVnZVxuICAgICAqL1xuICAgIHZhbHVlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBhbmltYXRlIGNoYW5naW5nIHRoZSBnYXVnZVxuICAgICAqL1xuICAgIGFuaW1hdGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEFuaW1hdGlvbiBkdXJhdGlvbiBpbiBzZWNvbmRzXG4gICAgICovXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgZ2F1Z2UgaXMgY3JlYXRlZFxuICAgICAqL1xuICAgIGdhdWdlQ3JlYXRlZDogRXZlbnRFbWl0dGVyPHtcbiAgICAgICAgZ2F1Z2U6IGFueTtcbiAgICB9PjtcbiAgICBwcml2YXRlIGdhdWdlO1xuICAgIGNvbnN0cnVjdG9yKGVsbTogRWxlbWVudFJlZiwgZGVmYXVsdHM6IEdhdWdlRGVmYXVsdHMpO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIHByaXZhdGUgdXBkYXRlVmFsdWUoKTtcbn1cbiJdfQ==