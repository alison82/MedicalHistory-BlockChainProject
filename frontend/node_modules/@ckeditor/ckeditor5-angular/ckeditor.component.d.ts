/**
 * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md.
 */
import { NgZone, EventEmitter, AfterViewInit, OnDestroy, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { CKEditor5 } from './ckeditor';
import * as ɵngcc0 from '@angular/core';
export declare class CKEditorComponent implements AfterViewInit, OnDestroy, ControlValueAccessor {
    /**
     * The reference to the DOM element created by the component.
     */
    private elementRef;
    /**
     * The constructor of the editor to be used for the instance of the component.
     * It can be e.g. the `ClassicEditorBuild`, `InlineEditorBuild` or some custom editor.
     */
    editor?: CKEditor5.EditorConstructor;
    /**
     * The configuration of the editor.
     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html
     * to learn more.
     */
    config: CKEditor5.Config;
    /**
     * The initial data of the editor. Useful when not using the ngModel.
     * See https://angular.io/api/forms/NgModel to learn more.
     */
    data: string;
    /**
     * Tag name of the editor component.
     *
     * The default tag is 'div'.
     */
    tagName: string;
    /**
     * The context watchdog.
     */
    watchdog?: CKEditor5.ContextWatchdog;
    /**
     * When set `true`, the editor becomes read-only.
     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly
     * to learn more.
     */
    disabled: boolean;
    /**
     * Fires when the editor is ready. It corresponds with the `editor#ready`
     * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready
     * event.
     */
    ready: EventEmitter<CKEditor5.Editor>;
    /**
     * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`
     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change
     * event.
     */
    change: EventEmitter<ChangeEvent>;
    /**
     * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`
     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur
     * event.
     */
    blur: EventEmitter<BlurEvent>;
    /**
     * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`
     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus
     * event.
     */
    focus: EventEmitter<FocusEvent>;
    /**
     * Fires when the editor component crashes.
     */
    error: EventEmitter<void>;
    /**
     * The instance of the editor created by this component.
     */
    readonly editorInstance: CKEditor5.Editor | null;
    /**
     * The editor watchdog. It is created when the context watchdog is not passed to the component.
     * It keeps the editor running.
     */
    private editorWatchdog?;
    /**
     * If the component is read–only before the editor instance is created, it remembers that state,
     * so the editor can become read–only once it is ready.
     */
    private initialIsDisabled;
    /**
     * An instance of https://angular.io/api/core/NgZone to allow the interaction with the editor
     * withing the Angular event loop.
     */
    private ngZone;
    /**
     * A callback executed when the content of the editor changes. Part of the
     * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.
     *
     * Note: Unset unless the component uses the `ngModel`.
     */
    private cvaOnChange?;
    /**
     * A callback executed when the editor has been blurred. Part of the
     * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.
     *
     * Note: Unset unless the component uses the `ngModel`.
     */
    private cvaOnTouched?;
    /**
     * Reference to the source element used by the editor.
     */
    private editorElement?;
    /**
     * A lock flag preventing from calling the `cvaOnChange()` during setting editor data.
     */
    private isEditorSettingData;
    private id;
    constructor(elementRef: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngOnDestroy(): Promise<void>;
    writeValue(value: string | null): void;
    registerOnChange(callback: (data: string) => void): void;
    registerOnTouched(callback: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    /**
     * Creates the editor instance, sets initial editor data, then integrates
     * the editor with the Angular component. This method does not use the `editor.setData()`
     * because of the issue in the collaboration mode (#6).
     */
    private attachToWatchdog;
    private getConfig;
    /**
     * Integrates the editor with the component by attaching related event listeners.
     */
    private setUpEditorEvents;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CKEditorComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CKEditorComponent, "ckeditor", never, {
    "config": "config";
    "data": "data";
    "tagName": "tagName";
    "disabled": "disabled";
    "editor": "editor";
    "watchdog": "watchdog";
}, {
    "ready": "ready";
    "change": "change";
    "blur": "blur";
    "focus": "focus";
    "error": "error";
}, never>;
}
export interface BlurEvent {
    event: CKEditor5.EventInfo<'blur'>;
    editor: CKEditor5.Editor;
}
export interface FocusEvent {
    event: CKEditor5.EventInfo<'focus'>;
    editor: CKEditor5.Editor;
}
export interface ChangeEvent {
    event: CKEditor5.EventInfo<'change:data'>;
    editor: CKEditor5.Editor;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2tlZGl0b3IuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNrZWRpdG9yLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZIQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDAzLTIwMjAsIENLU291cmNlIC0gRnJlZGVyaWNvIEtuYWJiZW4uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZC5cbiAqL1xuaW1wb3J0IHsgTmdab25lLCBFdmVudEVtaXR0ZXIsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDS0VkaXRvcjUgfSBmcm9tICcuL2NrZWRpdG9yJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENLRWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgLyoqXG4gICAgICogVGhlIHJlZmVyZW5jZSB0byB0aGUgRE9NIGVsZW1lbnQgY3JlYXRlZCBieSB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcbiAgICAvKipcbiAgICAgKiBUaGUgY29uc3RydWN0b3Igb2YgdGhlIGVkaXRvciB0byBiZSB1c2VkIGZvciB0aGUgaW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKiBJdCBjYW4gYmUgZS5nLiB0aGUgYENsYXNzaWNFZGl0b3JCdWlsZGAsIGBJbmxpbmVFZGl0b3JCdWlsZGAgb3Igc29tZSBjdXN0b20gZWRpdG9yLlxuICAgICAqL1xuICAgIGVkaXRvcj86IENLRWRpdG9yNS5FZGl0b3JDb25zdHJ1Y3RvcjtcbiAgICAvKipcbiAgICAgKiBUaGUgY29uZmlndXJhdGlvbiBvZiB0aGUgZWRpdG9yLlxuICAgICAqIFNlZSBodHRwczovL2NrZWRpdG9yLmNvbS9kb2NzL2NrZWRpdG9yNS9sYXRlc3QvYXBpL21vZHVsZV9jb3JlX2VkaXRvcl9lZGl0b3Jjb25maWctRWRpdG9yQ29uZmlnLmh0bWxcbiAgICAgKiB0byBsZWFybiBtb3JlLlxuICAgICAqL1xuICAgIGNvbmZpZzogQ0tFZGl0b3I1LkNvbmZpZztcbiAgICAvKipcbiAgICAgKiBUaGUgaW5pdGlhbCBkYXRhIG9mIHRoZSBlZGl0b3IuIFVzZWZ1bCB3aGVuIG5vdCB1c2luZyB0aGUgbmdNb2RlbC5cbiAgICAgKiBTZWUgaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9mb3Jtcy9OZ01vZGVsIHRvIGxlYXJuIG1vcmUuXG4gICAgICovXG4gICAgZGF0YTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRhZyBuYW1lIG9mIHRoZSBlZGl0b3IgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgdGFnIGlzICdkaXYnLlxuICAgICAqL1xuICAgIHRhZ05hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgY29udGV4dCB3YXRjaGRvZy5cbiAgICAgKi9cbiAgICB3YXRjaGRvZz86IENLRWRpdG9yNS5Db250ZXh0V2F0Y2hkb2c7XG4gICAgLyoqXG4gICAgICogV2hlbiBzZXQgYHRydWVgLCB0aGUgZWRpdG9yIGJlY29tZXMgcmVhZC1vbmx5LlxuICAgICAqIFNlZSBodHRwczovL2NrZWRpdG9yLmNvbS9kb2NzL2NrZWRpdG9yNS9sYXRlc3QvYXBpL21vZHVsZV9jb3JlX2VkaXRvcl9lZGl0b3ItRWRpdG9yLmh0bWwjbWVtYmVyLWlzUmVhZE9ubHlcbiAgICAgKiB0byBsZWFybiBtb3JlLlxuICAgICAqL1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGVkaXRvciBpcyByZWFkeS4gSXQgY29ycmVzcG9uZHMgd2l0aCB0aGUgYGVkaXRvciNyZWFkeWBcbiAgICAgKiBodHRwczovL2NrZWRpdG9yLmNvbS9kb2NzL2NrZWRpdG9yNS9sYXRlc3QvYXBpL21vZHVsZV9jb3JlX2VkaXRvcl9lZGl0b3ItRWRpdG9yLmh0bWwjZXZlbnQtcmVhZHlcbiAgICAgKiBldmVudC5cbiAgICAgKi9cbiAgICByZWFkeTogRXZlbnRFbWl0dGVyPENLRWRpdG9yNS5FZGl0b3I+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGNvbnRlbnQgb2YgdGhlIGVkaXRvciBoYXMgY2hhbmdlZC4gSXQgY29ycmVzcG9uZHMgd2l0aCB0aGUgYGVkaXRvci5tb2RlbC5kb2N1bWVudCNjaGFuZ2VgXG4gICAgICogaHR0cHM6Ly9ja2VkaXRvci5jb20vZG9jcy9ja2VkaXRvcjUvbGF0ZXN0L2FwaS9tb2R1bGVfZW5naW5lX21vZGVsX2RvY3VtZW50LURvY3VtZW50Lmh0bWwjZXZlbnQtY2hhbmdlXG4gICAgICogZXZlbnQuXG4gICAgICovXG4gICAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8Q2hhbmdlRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGVkaXRpbmcgdmlldyBvZiB0aGUgZWRpdG9yIGlzIGJsdXJyZWQuIEl0IGNvcnJlc3BvbmRzIHdpdGggdGhlIGBlZGl0b3IuZWRpdGluZy52aWV3LmRvY3VtZW50I2JsdXJgXG4gICAgICogaHR0cHM6Ly9ja2VkaXRvci5jb20vZG9jcy9ja2VkaXRvcjUvbGF0ZXN0L2FwaS9tb2R1bGVfZW5naW5lX3ZpZXdfZG9jdW1lbnQtRG9jdW1lbnQuaHRtbCNldmVudC1ldmVudDpibHVyXG4gICAgICogZXZlbnQuXG4gICAgICovXG4gICAgYmx1cjogRXZlbnRFbWl0dGVyPEJsdXJFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgZWRpdGluZyB2aWV3IG9mIHRoZSBlZGl0b3IgaXMgZm9jdXNlZC4gSXQgY29ycmVzcG9uZHMgd2l0aCB0aGUgYGVkaXRvci5lZGl0aW5nLnZpZXcuZG9jdW1lbnQjZm9jdXNgXG4gICAgICogaHR0cHM6Ly9ja2VkaXRvci5jb20vZG9jcy9ja2VkaXRvcjUvbGF0ZXN0L2FwaS9tb2R1bGVfZW5naW5lX3ZpZXdfZG9jdW1lbnQtRG9jdW1lbnQuaHRtbCNldmVudC1ldmVudDpmb2N1c1xuICAgICAqIGV2ZW50LlxuICAgICAqL1xuICAgIGZvY3VzOiBFdmVudEVtaXR0ZXI8Rm9jdXNFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgZWRpdG9yIGNvbXBvbmVudCBjcmFzaGVzLlxuICAgICAqL1xuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgLyoqXG4gICAgICogVGhlIGluc3RhbmNlIG9mIHRoZSBlZGl0b3IgY3JlYXRlZCBieSB0aGlzIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICByZWFkb25seSBlZGl0b3JJbnN0YW5jZTogQ0tFZGl0b3I1LkVkaXRvciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogVGhlIGVkaXRvciB3YXRjaGRvZy4gSXQgaXMgY3JlYXRlZCB3aGVuIHRoZSBjb250ZXh0IHdhdGNoZG9nIGlzIG5vdCBwYXNzZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICAgKiBJdCBrZWVwcyB0aGUgZWRpdG9yIHJ1bm5pbmcuXG4gICAgICovXG4gICAgcHJpdmF0ZSBlZGl0b3JXYXRjaGRvZz87XG4gICAgLyoqXG4gICAgICogSWYgdGhlIGNvbXBvbmVudCBpcyByZWFk4oCTb25seSBiZWZvcmUgdGhlIGVkaXRvciBpbnN0YW5jZSBpcyBjcmVhdGVkLCBpdCByZW1lbWJlcnMgdGhhdCBzdGF0ZSxcbiAgICAgKiBzbyB0aGUgZWRpdG9yIGNhbiBiZWNvbWUgcmVhZOKAk29ubHkgb25jZSBpdCBpcyByZWFkeS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGluaXRpYWxJc0Rpc2FibGVkO1xuICAgIC8qKlxuICAgICAqIEFuIGluc3RhbmNlIG9mIGh0dHBzOi8vYW5ndWxhci5pby9hcGkvY29yZS9OZ1pvbmUgdG8gYWxsb3cgdGhlIGludGVyYWN0aW9uIHdpdGggdGhlIGVkaXRvclxuICAgICAqIHdpdGhpbmcgdGhlIEFuZ3VsYXIgZXZlbnQgbG9vcC5cbiAgICAgKi9cbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICAvKipcbiAgICAgKiBBIGNhbGxiYWNrIGV4ZWN1dGVkIHdoZW4gdGhlIGNvbnRlbnQgb2YgdGhlIGVkaXRvciBjaGFuZ2VzLiBQYXJ0IG9mIHRoZVxuICAgICAqIGBDb250cm9sVmFsdWVBY2Nlc3NvcmAgKGh0dHBzOi8vYW5ndWxhci5pby9hcGkvZm9ybXMvQ29udHJvbFZhbHVlQWNjZXNzb3IpIGludGVyZmFjZS5cbiAgICAgKlxuICAgICAqIE5vdGU6IFVuc2V0IHVubGVzcyB0aGUgY29tcG9uZW50IHVzZXMgdGhlIGBuZ01vZGVsYC5cbiAgICAgKi9cbiAgICBwcml2YXRlIGN2YU9uQ2hhbmdlPztcbiAgICAvKipcbiAgICAgKiBBIGNhbGxiYWNrIGV4ZWN1dGVkIHdoZW4gdGhlIGVkaXRvciBoYXMgYmVlbiBibHVycmVkLiBQYXJ0IG9mIHRoZVxuICAgICAqIGBDb250cm9sVmFsdWVBY2Nlc3NvcmAgKGh0dHBzOi8vYW5ndWxhci5pby9hcGkvZm9ybXMvQ29udHJvbFZhbHVlQWNjZXNzb3IpIGludGVyZmFjZS5cbiAgICAgKlxuICAgICAqIE5vdGU6IFVuc2V0IHVubGVzcyB0aGUgY29tcG9uZW50IHVzZXMgdGhlIGBuZ01vZGVsYC5cbiAgICAgKi9cbiAgICBwcml2YXRlIGN2YU9uVG91Y2hlZD87XG4gICAgLyoqXG4gICAgICogUmVmZXJlbmNlIHRvIHRoZSBzb3VyY2UgZWxlbWVudCB1c2VkIGJ5IHRoZSBlZGl0b3IuXG4gICAgICovXG4gICAgcHJpdmF0ZSBlZGl0b3JFbGVtZW50PztcbiAgICAvKipcbiAgICAgKiBBIGxvY2sgZmxhZyBwcmV2ZW50aW5nIGZyb20gY2FsbGluZyB0aGUgYGN2YU9uQ2hhbmdlKClgIGR1cmluZyBzZXR0aW5nIGVkaXRvciBkYXRhLlxuICAgICAqL1xuICAgIHByaXZhdGUgaXNFZGl0b3JTZXR0aW5nRGF0YTtcbiAgICBwcml2YXRlIGlkO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIG5nWm9uZTogTmdab25lKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IHN0cmluZyB8IG51bGwpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoY2FsbGJhY2s6IChkYXRhOiBzdHJpbmcpID0+IHZvaWQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIGVkaXRvciBpbnN0YW5jZSwgc2V0cyBpbml0aWFsIGVkaXRvciBkYXRhLCB0aGVuIGludGVncmF0ZXNcbiAgICAgKiB0aGUgZWRpdG9yIHdpdGggdGhlIEFuZ3VsYXIgY29tcG9uZW50LiBUaGlzIG1ldGhvZCBkb2VzIG5vdCB1c2UgdGhlIGBlZGl0b3Iuc2V0RGF0YSgpYFxuICAgICAqIGJlY2F1c2Ugb2YgdGhlIGlzc3VlIGluIHRoZSBjb2xsYWJvcmF0aW9uIG1vZGUgKCM2KS5cbiAgICAgKi9cbiAgICBwcml2YXRlIGF0dGFjaFRvV2F0Y2hkb2c7XG4gICAgcHJpdmF0ZSBnZXRDb25maWc7XG4gICAgLyoqXG4gICAgICogSW50ZWdyYXRlcyB0aGUgZWRpdG9yIHdpdGggdGhlIGNvbXBvbmVudCBieSBhdHRhY2hpbmcgcmVsYXRlZCBldmVudCBsaXN0ZW5lcnMuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRVcEVkaXRvckV2ZW50cztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQmx1ckV2ZW50IHtcbiAgICBldmVudDogQ0tFZGl0b3I1LkV2ZW50SW5mbzwnYmx1cic+O1xuICAgIGVkaXRvcjogQ0tFZGl0b3I1LkVkaXRvcjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgRm9jdXNFdmVudCB7XG4gICAgZXZlbnQ6IENLRWRpdG9yNS5FdmVudEluZm88J2ZvY3VzJz47XG4gICAgZWRpdG9yOiBDS0VkaXRvcjUuRWRpdG9yO1xufVxuZXhwb3J0IGludGVyZmFjZSBDaGFuZ2VFdmVudCB7XG4gICAgZXZlbnQ6IENLRWRpdG9yNS5FdmVudEluZm88J2NoYW5nZTpkYXRhJz47XG4gICAgZWRpdG9yOiBDS0VkaXRvcjUuRWRpdG9yO1xufVxuIl19