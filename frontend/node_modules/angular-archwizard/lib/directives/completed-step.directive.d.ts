import { OnInit } from '@angular/core';
import { WizardStep } from '../util/wizard-step.interface';
/**
 * The `awCompletedStep` directive can be used to make a wizard step initially completed.
 *
 * Initially completed steps are shown as completed when the wizard is presented to the user.
 *
 * A typical use case is to make a step initially completed if it is automatically filled with some derived/predefined information.
 *
 * ### Syntax
 *
 * ```html
 * <aw-wizard-step awCompletedStep>
 *     ...
 * </aw-wizard-step>
 * ```
 *
 * An optional boolean condition can be specified:
 *
 * ```html
 * <aw-wizard-step [awCompletedStep]="shouldBeCompleted">
 *     ...
 * </aw-wizard-step>
 * ```
 *
 * ### Example
 *
 * ```html
 * <aw-wizard-step stepTitle="First step" [awCompletedStep]="firstStepPrefilled">
 *     ...
 * </aw-wizard-step>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class CompletedStepDirective implements OnInit {
    private wizardStep;
    initiallyCompleted: boolean;
    /**
     * Constructor
     *
     * @param wizardStep The wizard step, which contains this [[CompletedStepDirective]]
     */
    constructor(wizardStep: WizardStep);
    /**
     * Initialization work
     */
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CompletedStepDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CompletedStepDirective, "[awCompletedStep]", never, {
    "initiallyCompleted": "awCompletedStep";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxldGVkLXN0ZXAuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImNvbXBsZXRlZC1zdGVwLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQWFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBXaXphcmRTdGVwIH0gZnJvbSAnLi4vdXRpbC93aXphcmQtc3RlcC5pbnRlcmZhY2UnO1xuLyoqXG4gKiBUaGUgYGF3Q29tcGxldGVkU3RlcGAgZGlyZWN0aXZlIGNhbiBiZSB1c2VkIHRvIG1ha2UgYSB3aXphcmQgc3RlcCBpbml0aWFsbHkgY29tcGxldGVkLlxuICpcbiAqIEluaXRpYWxseSBjb21wbGV0ZWQgc3RlcHMgYXJlIHNob3duIGFzIGNvbXBsZXRlZCB3aGVuIHRoZSB3aXphcmQgaXMgcHJlc2VudGVkIHRvIHRoZSB1c2VyLlxuICpcbiAqIEEgdHlwaWNhbCB1c2UgY2FzZSBpcyB0byBtYWtlIGEgc3RlcCBpbml0aWFsbHkgY29tcGxldGVkIGlmIGl0IGlzIGF1dG9tYXRpY2FsbHkgZmlsbGVkIHdpdGggc29tZSBkZXJpdmVkL3ByZWRlZmluZWQgaW5mb3JtYXRpb24uXG4gKlxuICogIyMjIFN5bnRheFxuICpcbiAqIGBgYGh0bWxcbiAqIDxhdy13aXphcmQtc3RlcCBhd0NvbXBsZXRlZFN0ZXA+XG4gKiAgICAgLi4uXG4gKiA8L2F3LXdpemFyZC1zdGVwPlxuICogYGBgXG4gKlxuICogQW4gb3B0aW9uYWwgYm9vbGVhbiBjb25kaXRpb24gY2FuIGJlIHNwZWNpZmllZDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8YXctd2l6YXJkLXN0ZXAgW2F3Q29tcGxldGVkU3RlcF09XCJzaG91bGRCZUNvbXBsZXRlZFwiPlxuICogICAgIC4uLlxuICogPC9hdy13aXphcmQtc3RlcD5cbiAqIGBgYFxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgaHRtbFxuICogPGF3LXdpemFyZC1zdGVwIHN0ZXBUaXRsZT1cIkZpcnN0IHN0ZXBcIiBbYXdDb21wbGV0ZWRTdGVwXT1cImZpcnN0U3RlcFByZWZpbGxlZFwiPlxuICogICAgIC4uLlxuICogPC9hdy13aXphcmQtc3RlcD5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb21wbGV0ZWRTdGVwRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcml2YXRlIHdpemFyZFN0ZXA7XG4gICAgaW5pdGlhbGx5Q29tcGxldGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0gd2l6YXJkU3RlcCBUaGUgd2l6YXJkIHN0ZXAsIHdoaWNoIGNvbnRhaW5zIHRoaXMgW1tDb21wbGV0ZWRTdGVwRGlyZWN0aXZlXV1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih3aXphcmRTdGVwOiBXaXphcmRTdGVwKTtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXphdGlvbiB3b3JrXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbn1cbiJdfQ==